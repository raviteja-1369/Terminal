<script lang="ts">
  import WelcomePortal from './lib/widgets/WelcomePortal.svelte';
  import RadialDial from './lib/widgets/RadialDial.svelte';
  import StatusDock from './lib/widgets/StatusDock.svelte';
  import FloatingStream from './lib/widgets/FloatingStream.svelte';
  import { digitalProgress, analogProgress, projectProgress } from './lib/store';
  import { sendToPerplexity } from './lib/ai/perplexity';
  import ResponseLeaf from './lib/widgets/ResponseLeaf.svelte';

  let showResponse = false;
  let aiMessage = "";
  $: digital = $digitalProgress ?? 0;
  $: analog = $analogProgress ?? 0;
  $: project = $projectProgress ?? 0;

  async function handleUserInput(input: string) {
    aiMessage = "Thinking...";
    showResponse = true;
    try {
      const reply = await sendToPerplexity(input);
      aiMessage = reply;
    } catch (err) {
      aiMessage = "Error: " + err.message;
    }
  }
</script>
<FloatingStream />
<div class="hud-main-container">

  <!-- HUD Neon Frame -->
  <svg class="hud-frame" viewBox="0 0 100 100" preserveAspectRatio="none">
    <polyline points="2,8 2,2 8,2" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="92,2 98,2 98,8" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="2,92 2,98 8,98" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="92,98 98,98 98,92" stroke="#00ffee" stroke-width="0.6" fill="none" />
  </svg>

  <!-- Title Bar -->
  <div class="hud-titlebar">
    <svg class="trapezium-bg" viewBox="0 0 400 75" width="400" height="75">
      <polygon points="40,75 0,0 400,0 360,75" class="trapezium-shape" />
    </svg>
    <div class="hud-title-text">TERMINAL</div>
  </div>

  <!-- Main Row: Welcome + Dials -->
  <div class="hud-core-row">
    <div class="welcome-wrapper">
      <WelcomePortal />
    </div>
    <RadialDial label="Digital" percent={digital} />
    <RadialDial label="Analog" percent={analog} />
    <RadialDial label="Project" percent={project} />
  </div>
  {#if showResponse}
    <ResponseLeaf message={aiMessage} onClose={() => showResponse = false} />
  {/if}

  <!-- Status Dock -->
  <StatusDock />
</div>

<style>
  :global(html), :global(body) {
    margin: 0;
    padding: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden !important;
    background: #0d1117;
    font-family: 'Orbitron', monospace;
  }

  .hud-main-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100vw;
    height: 100vh;
    position: relative;
  }

  .hud-frame {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 98;
    pointer-events: none;
    opacity: 0.23;
    filter: drop-shadow(0 0 6px #00ffee) blur(0.3px);
  }

  .hud-titlebar {
    position: relative;
    margin-top: 1.2rem;
    z-index: 50;
  }

  .trapezium-bg {
    position: relative;
    top: 0;
    left: 0;
    width: 400px;
    height: 75px;
  }

  .trapezium-shape {
    fill: rgba(10, 20, 35, 0.73);
    stroke: #00ffee;
    stroke-width: 3.5;
  }

  .hud-title-text {
    position: absolute;
    top: 19px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 2.1rem;
    letter-spacing: 0.23em;
    color: #00ffee;
    font-weight: 800;
  }

  .hud-core-row {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 3rem;
    margin-top: 13rem;
    margin-bottom: 8rem;
    flex-wrap: wrap;
    width: 100%;
    padding: 0 2rem;
    max-width: 1600px;
    z-index: 10;
  }

  .welcome-wrapper {
    flex-shrink: 0;
    min-width: 320px;
    max-width: 420px;
  }
</style>
<script lang="ts">
    import { onMount } from 'svelte';
    import { memoryData } from '../memoryStore'; // Corrected path
  
    let visibleItems: { text: string; id: number }[] = [];
    let idCounter = 0;
  
    function pickRandomMemory(): string {
      const all = [
        ...memoryData.logs.map(e => e.content),
        ...memoryData.todayTasks,
        ...memoryData.focusItems
      ];
  
      if (all.length === 0) {
        return "⚠️ No memory data yet. Start logging!";
      }
  
      return all[Math.floor(Math.random() * all.length)];
    }
  
    function addFloatingItem() {
      const text = pickRandomMemory();
      const id = idCounter++;
      visibleItems = [...visibleItems, { text, id }]; // Use spread operator to update array
  
      setTimeout(() => {
        visibleItems = visibleItems.filter(item => item.id !== id);
      }, 10000);
    }
  
    onMount(() => {
      console.log("🟢 FloatingStream mounted");
      addFloatingItem();
      const interval = setInterval(addFloatingItem, 3000);
      return () => clearInterval(interval);
    });
  </script>
  
  <style>
    .stream-container {
      position: fixed; /* Changed to fixed */
      top: 10vh;
      left: 0; /* Ensure it starts from the left edge */
      width: 100vw;
      pointer-events: none;
      overflow: hidden;
      z-index: 9999; /* Increased z-index to ensure it's on top */
    }
  
    .floating-text {
      position: absolute;
      left: 100vw; /* Start off-screen to the right */
      white-space: nowrap;
      font-family: 'Fira Code', monospace;
      font-size: 0.9rem;
      color: rgba(0, 255, 255, 0.6);
      text-shadow: 0 0 6px rgba(0, 255, 255, 0.8);
      animation: scroll-left 20s linear forwards; /*Slower animation*/
    }
  
    @keyframes scroll-left {
      from { left: 100vw; top: calc(5vh + 50px * var(--i)); }
      to { left: -100%; top: calc(5vh + 50px * var(--i)); }
    }
  </style>
  
  <div class="stream-container">
    {#each visibleItems as item, i (item.id)}
      <div class="floating-text" style="--i: {i}">{item.text}</div>
    {/each}
  </div>
  