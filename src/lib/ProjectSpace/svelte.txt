<script lang="ts">
    let aiResponses: Array<{prompt: string, response: string, file: string, timestamp: Date, source: string}> = [];
  
    export function addResponse(prompt: string, response: string, file: string, source: string = 'ai') {
      aiResponses = [...aiResponses, { prompt, response, file, timestamp: new Date(), source }];
    }
  
    function formatResponse(text: string): string {
      // Basic markdown-like formatting for citations
      return text
        .replace(/\[(\d+)\]/g, '<sup class="citation">[$1]</sup>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>');
    }
  </script>
  
  <div class="ai-assistant">
    <h2>ü§ñ Co-Strategist</h2>
    <div class="ai-output">
      {#if aiResponses.length === 0}
        <div class="default-tips">
          <p><strong>üí° Tip:</strong> Add hazard detection logic to the decode stage.</p>
          <p><strong>üîç Insight:</strong> Your memory controller can benefit from burst access alignment.</p>
          <p><strong>‚ö° Ready:</strong> Ask Perplexity about your Verilog code for real-time insights!</p>
        </div>
      {:else}
        {#each aiResponses.slice(-3) as response}
          <div class="response-item" class:error={response.source === 'error'}>
            <div class="response-header">
              <div class="question">
                <strong>Q:</strong> {response.prompt}
              </div>
              <div class="meta">
                <span class="file-tag">{response.file}</span>
                <span class="source-tag" class:perplexity={response.source === 'perplexity'}>
                  {response.source === 'perplexity' ? '‚ö° Perplexity' : response.source}
                </span>
              </div>
            </div>
            <div class="response-content">
              <strong>A:</strong> {@html formatResponse(response.response)}
            </div>
            <div class="timestamp">
              {response.timestamp.toLocaleTimeString()}
            </div>
          </div>
        {/each}
      {/if}
    </div>
  </div>
  
  <style>
    .ai-assistant {
      background: #0f172a;
      border: 1px solid #00ffee33;
      padding: 1rem;
      border-radius: 10px;
      flex-grow: 1;
      resize: vertical;
      overflow: auto;
      min-height: 150px;
    }
  
    .ai-assistant h2 {
      margin-top: 0;
      font-size: 16px;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      text-align: center;
    }
  
    .ai-output {
      margin-top: 1rem;
      font-size: 13px;
      line-height: 1.6;
      color: #c0ffee;
      font-family: monospace;
    }
  
    .default-tips p {
      margin-bottom: 0.75rem;
      padding: 0.5rem;
      background: #1e293b;
      border-radius: 6px;
      border-left: 3px solid #00ffee;
    }
  
    .response-item {
      margin-bottom: 1rem;
      padding: 0.75rem;
      background: #1e293b;
      border-radius: 6px;
      border-left: 3px solid #9333ea;
    }
  
    .response-item.error {
      border-left-color: #ef4444;
      background: #1e1b1b;
    }
  
    .response-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 0.5rem;
      font-size: 12px;
      gap: 0.5rem;
    }
  
    .question {
      flex-grow: 1;
    }
  
    .meta {
      display: flex;
      gap: 0.25rem;
      flex-shrink: 0;
    }
  
    .file-tag {
      background: #00ffee22;
      color: #00ffee;
      padding: 0.1rem 0.3rem;
      border-radius: 3px;
      font-size: 10px;
    }
  
    .source-tag {
      background: #374151;
      color: #9ca3af;
      padding: 0.1rem 0.3rem;
      border-radius: 3px;
      font-size: 10px;
    }
  
    .source-tag.perplexity {
      background: #9333ea22;
      color: #9333ea;
    }
  
    .response-content {
      white-space: pre-wrap;
      margin-bottom: 0.5rem;
    }
  
    .response-content :global(.citation) {
      color: #9333ea;
      font-size: 10px;
    }
  
    .timestamp {
      font-size: 10px;
      color: #6b7280;
      text-align: right;
    }
  </style>
  <script lang="ts">
    // Placeholder for interactive architecture view
    // This will later connect to design.json and support clickable blocks
  </script>
  
  <div class="architecture-view" contenteditable="false">
    <h2>üîß Architecture Map</h2>
    <div class="arch-grid">
      <div class="block">FETCH</div>
      <div class="block">DECODE</div>
      <div class="block">EXECUTE</div>
      <div class="block">MEMORY</div>
      <div class="block">WB</div>
    </div>
  </div>
  
  <style>
    .architecture-view {
      background: #0f172a;
      border: 1px solid #00ffee33;
      padding: 1rem;
      border-radius: 10px;
      flex-grow: 1;
      resize: vertical;
      overflow: auto;
      min-height: 150px;
    }
  
    .architecture-view h2 {
      margin-top: 0;
      font-size: 16px;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      text-align: center;
    }
  
    .arch-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(90px, 1fr));
      gap: 0.75rem;
      padding-top: 1rem;
    }
  
    .block {
      background: #1e293b;
      border: 1px solid #00ffee55;
      color: #00ffee;
      padding: 0.75rem;
      text-align: center;
      border-radius: 6px;
      font-size: 13px;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s ease;
    }
  
    .block:hover {
      background: #334155;
    }
  </style>
  <script lang="ts">
    import { onMount } from 'svelte';
    import * as monaco from 'monaco-editor';
    import { fileContent } from './stores/editorStore';
  
    let editorContainer: HTMLDivElement;
    let editorInstance: monaco.editor.IStandaloneCodeEditor;
  
    // Sync editor content with store
    $: if (editorInstance && $fileContent !== undefined) {
      const current = editorInstance.getValue();
      if ($fileContent !== current) {
        editorInstance.setValue($fileContent);
      }
    }
  
    // Export function to get current editor value
    export function getEditorValue(): string {
      return editorInstance?.getValue?.() || '';
    }
  
    onMount(() => {
      monaco.editor.defineTheme('hud-terminal-neon', {
        base: 'vs-dark',
        inherit: true,
        rules: [
          { token: '', foreground: '00ffee' },
          { token: 'keyword', foreground: 'f92672', fontStyle: 'bold' },
          { token: 'comment', foreground: '5d6d7e', fontStyle: 'italic' },
          { token: 'string', foreground: '00ff7f' },
          { token: 'number', foreground: 'ffdd00' }
        ],
        colors: {
          'editor.background': '#0d1117',
          'editor.foreground': '#00ffee',
          'editorLineNumber.foreground': '#00ffee88',
          'editorCursor.foreground': '#00ffee',
          'editorLineHighlightBackground': '#00ffee11',
          'scrollbarSlider.background': '#00ffee33',
          'scrollbarSlider.hoverBackground': '#00ffee55',
          'scrollbarSlider.activeBackground': '#00ffee88'
        }
      });
  
      editorInstance = monaco.editor.create(editorContainer, {
        value: $fileContent,
        language: 'verilog',
        theme: 'hud-terminal-neon',
        fontSize: 14,
        minimap: { enabled: false },
        automaticLayout: true,
        scrollbar: {
          verticalScrollbarSize: 6,
          horizontalScrollbarSize: 6,
          useShadows: false,
        }
      });
  
      // Update store when user types
      editorInstance.onDidChangeModelContent(() => {
        fileContent.set(editorInstance.getValue());
      });
  
      return () => editorInstance?.dispose();
    });
  </script>
  
  <div class="editor-wrapper">
    <div class="code-editor" bind:this={editorContainer}></div>
  </div>
  
  <style>
    .editor-wrapper {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      min-height: 0;
      overflow: hidden;
      margin-bottom: 1rem;
    }
  
    .code-editor {
      width: 100%;
      height: 100%;
      background: #0d1117;
      border: 1px solid #00ffee33;
      border-radius: 10px;
      overflow: hidden;
      box-sizing: border-box;
    }
  </style>
  <script lang="ts">
    import { analyzeVerilogWithPerplexity } from './api/PerplexityAPI';
    import { fileContent, activeFile } from './stores/editorStore';
  
    // Instead of createEventDispatcher, use callback props
    export let onAiResponse: (data: {prompt: string, response: string, file: string, source: string}) => void = () => {};
  
    let userInput = '';
    let isLoading = false;
  
    async function submitPrompt() {
      const trimmed = userInput.trim();
      if (trimmed.length === 0 || isLoading) return;
  
      isLoading = true;
      
      try {
        const currentCode = $fileContent || '// No code loaded';
        const fileName = $activeFile ? $activeFile.split(/[/\\]/).pop() : 'unknown';
        
        console.log('[PERPLEXITY] Analyzing code with prompt:', trimmed);
        
        const aiResponse = await analyzeVerilogWithPerplexity(currentCode, trimmed);
        
        // Call the callback prop instead of dispatching
        onAiResponse({ 
          prompt: trimmed,
          response: aiResponse,
          file: fileName,
          source: 'perplexity'
        });
        
        userInput = '';
      } catch (error) {
        console.error('[PERPLEXITY] Error:', error);
        onAiResponse({ 
          prompt: trimmed,
          response: `‚ùå Perplexity Error: ${error.message}`,
          file: 'error',
          source: 'error'
        });
      } finally {
        isLoading = false;
      }
    }
  </script>
  
  <div class="code-prompt-box">
    <div class="prompt-wrapper" class:loading={isLoading}>
      <span class="prompt-arrow">&gt;</span>
      <input
        class="prompt-input"
        type="text"
        placeholder={isLoading ? "üîç Searching latest Verilog practices..." : "Talk to Perplexity... (e.g., optimize this floating-point unit)"}
        bind:value={userInput}
        disabled={isLoading}
        onkeydown={(e) => e.key === 'Enter' && submitPrompt()}
      />
      {#if isLoading}
        <span class="loading-indicator">üîç</span>
      {:else}
        <span class="perplexity-badge">‚ö°</span>
      {/if}
    </div>
  </div>
  
  
<style>
  .code-prompt-box {
    width: 100%;
    margin-top: 0rem;
    margin-bottom: 0.5rem;
    background: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
  }

  .prompt-wrapper {
    width: 100%;
    display: flex;
    align-items: center;
    background: #0f172a;
    border: 1px solid #00ffee66;
    border-radius: 9999px;
    padding: 0.1rem 1rem;
    gap: 0.75rem;
    box-shadow: 0 0 8px #00ffee44;
    transition: all 0.3s;
  }

  .prompt-wrapper.loading {
    border-color: #9333ea;
    box-shadow: 0 0 12px #9333ea44;
  }

  .prompt-arrow {
    font-family: monospace;
    font-size: 1rem;
    color: #00ffeecc;
  }

  .prompt-input {
    flex-grow: 1;
    background: transparent;
    border: none;
    color: #00ffee;
    font-family: 'Orbitron', monospace;
    font-size: 14px;
    outline: none;
    padding: 0.25rem 0;
  }

  .prompt-input:disabled {
    opacity: 0.7;
  }

  .loading-indicator {
    font-size: 16px;
    animation: pulse 1s infinite;
  }

  .perplexity-badge {
    font-size: 14px;
    color: #9333ea;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
</style>
<script lang="ts">
    import { onMount } from 'svelte';
    import { writable } from 'svelte/store';
    import { Clock3 } from 'lucide-svelte';
  
    const time = writable('00:00:00');
  
    function formatTime(seconds: number): string {
      const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
      const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
      const s = (seconds % 60).toString().padStart(2, '0');
      return `${h}:${m}:${s}`;
    }
  
    onMount(() => {
      let seconds = 0;
      const interval = setInterval(() => {
        seconds += 1;
        time.set(formatTime(seconds));
      }, 1000);
      return () => clearInterval(interval);
    });
  </script>
  
  <div class="design-bar">
    <div class="title">PROJECT SPACE</div>
    <div class="timer-group">
      <Clock3 class="clock-icon" />
      <span class="timer">{$time}</span>
    </div>
  </div>
  
  <style>
    .design-bar {
      width: 100%;
      height: 60px;
      background: #111827;
      border-bottom: 1px solid #00ffee44;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1rem;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      font-size: 14px;
      letter-spacing: 1px;
      box-sizing: border-box;
    }
  
    .title {
      font-size: 18px;
      font-weight: bold;
    }
  
    .timer-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      white-space: nowrap;
    }
  
    .clock-icon {
      width: 20px;
      height: 20px;
      stroke: #00ffee;
    }
  
    .timer {
      font-weight: bold;
      font-size: 16px;
    }
  </style>
  <script lang="ts">
    import { onMount } from 'svelte';
    import { writable } from 'svelte/store';
    import { Clock3 } from 'lucide-svelte';
    import { openProject, loadFile, saveFile } from './api/FileAPI';
    import { openFiles, activeFile, fileContent, projectName, isLoading } from './stores/editorStore';
    
    import ArchitectureView from './ArchitectureView.svelte';
    import AIAssistant from './AIAssistant.svelte';
    import CodeEditor from './CodeEditor.svelte';
    import CodePromptBox from './CodePromptBox.svelte';
    import SimulationPanel from './SimulationPanel.svelte';
  
    const time = writable('00:00:00');
    let editorRef: CodeEditor;
    let aiAssistantRef: AIAssistant;
  
    // FIXED: Callback function for AI responses (Svelte 5 style)
    function handleAIResponse(data: {prompt: string, response: string, file: string, source: string}) {
      console.log('[MAIN] AI Response received:', data);
      aiAssistantRef?.addResponse(data.prompt, data.response, data.file, data.source || 'ai');
    }
  
    function getFileName(fullPath: string): string {
      return fullPath.split(/[/\\]/).pop() || fullPath;
    }
  
    function formatTime(seconds: number): string {
      const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
      const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
      const s = (seconds % 60).toString().padStart(2, '0');
      return `${h}:${m}:${s}`;
    }
  
    onMount(() => {
      let seconds = 0;
      const interval = setInterval(() => {
        seconds += 1;
        time.set(formatTime(seconds));
      }, 1000);
      return () => clearInterval(interval);
    });
  
    async function handleOpenProject() {
      if ($isLoading) return;
      
      const path = prompt('Enter the FULL path to your project folder:');
      if (!path) return;
  
      isLoading.set(true);
      fileContent.set('// Opening project...');
      
      try {
        const files = await openProject(path);
        
        if (files.length === 0) {
          alert('No Verilog files (.v, .sv, .vh) found in that folder.');
          fileContent.set('// No Verilog files found. Try opening another folder.');
          openFiles.set([]);
          activeFile.set(null);
          return;
        }
        
        openFiles.set(files);
        projectName.set(getFileName(path));
        
        // Load the first file automatically
        await handleFileClick(files[0]);
        
      } catch (err) {
        console.error('[FRONTEND] Error opening project:', err);
        alert(`‚ùå Failed to open project.\n\nError: ${err.message}`);
        fileContent.set(`// Error opening project. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  
    async function handleFileClick(filePath: string) {
      if ($isLoading) return;
      
      isLoading.set(true);
      activeFile.set(filePath);
      fileContent.set(`// Loading ${getFileName(filePath)}...`);
  
      try {
        const content = await loadFile(filePath);
        fileContent.set(content);
      } catch (err) {
        console.error(`[FRONTEND] Error loading file:`, err);
        alert(`‚ùå Failed to load file: ${getFileName(filePath)}\n\nError: ${err.message}`);
        fileContent.set(`// Error loading file. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  
    async function handleSave() {
      if (!$activeFile || $isLoading) return;
      
      // Get current editor content
      const currentContent = editorRef?.getEditorValue() || $fileContent;
      
      try {
        await saveFile($activeFile, currentContent);
        alert('‚úÖ File saved successfully!');
      } catch (err) {
        alert('‚ùå Failed to save file: ' + err.message);
      }
    }
  </script>
  
  <div class="pspace-container">
    <div class="design-toolbar">
      <div class="left-group">
        <span class="project-name">{$projectName}</span>
        <div class="tabs" role="tablist">
          {#each $openFiles as file (file)}
            <button
              class="tab"
              class:active={file === $activeFile}
              type="button"
              onclick={() => handleFileClick(file)}
              disabled={$isLoading}
            >
              {getFileName(file)}
            </button>
          {/each}
        </div>
      </div>
  
      <div class="right-group">
        <button class="glow-btn" onclick={handleOpenProject} disabled={$isLoading} type="button" aria-label="Open Project Folder">
          {#if $isLoading}‚è≥{:else}üìÇ{/if}
        </button>
        <button class="glow-btn" onclick={handleSave} disabled={$isLoading || !$activeFile} type="button" aria-label="Save File">
          üíæ
        </button>
        <Clock3 class="clock-icon" />
        <span class="timer">{$time}</span>
      </div>
    </div>
  
    <div class="pspace-main">
      <div class="left-column">
        <ArchitectureView />
        <AIAssistant bind:this={aiAssistantRef} />
      </div>
      <div class="center-column">
        <CodeEditor bind:this={editorRef} />
        <!-- FIXED: Pass callback prop instead of using event dispatcher -->
        <CodePromptBox onAiResponse={handleAIResponse} />
      </div>
      <div class="right-column">
        <SimulationPanel />
      </div>
    </div>
  </div>
  
  <style>
    .pspace-container {
      width: 100vw;
      height: 100vh;
      display: flex;
      flex-direction: column;
      background-color: #0d1117;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      overflow: hidden;
    }
    .design-toolbar {
      width: 100%;
      height: 60px;
      background: linear-gradient(to right, #0f172a, #1a2332);
      border-bottom: 1px solid #00ffee55;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1rem;
      color: #00ffee;
      box-sizing: border-box;
    }
    .left-group { display: flex; align-items: center; gap: 1rem; }
    .project-name { font-size: 14px; font-weight: bold; }
    .tabs { display: flex; gap: 0.25rem; align-items: center; }
    .tab {
      background: #1e293b;
      padding: 0.25rem 0.75rem;
      border-radius: 4px;
      color: #00ffeeaa;
      font-family: monospace;
      cursor: pointer;
      transition: background 0.2s;
      font-size: 13px;
      border: none;
      border-bottom: 2px solid transparent;
    }
    .tab:disabled { cursor: not-allowed; opacity: 0.6; }
    .tab.active { background: #00ffee22; color: #00ffee; border-bottom: 2px solid #00ffee; }
    .right-group { display: flex; align-items: center; gap: 0.75rem; }
    .glow-btn {
      background: transparent;
      border: 1px solid #00ffee44;
      color: #00ffee;
      padding: 0.2rem 0.6rem;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 0 6px #00ffee55;
      transition: background 0.2s;
    }
    .glow-btn:hover { background: #00ffee22; }
    .glow-btn:disabled { cursor: not-allowed; opacity: 0.6; box-shadow: none; }
    .clock-icon { width: 18px; height: 18px; stroke: #00ffee; }
    .timer { font-weight: bold; font-size: 15px; }
    .pspace-main {
      flex: 1;
      display: flex;
      flex-direction: row;
      gap: 1rem;
      padding: 1rem;
    }
    .left-column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      min-width: 250px;
    }
    .center-column {
      flex: 2;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      min-width: 0;
    }
    .right-column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      min-width: 250px;
    }
  </style>
  <script lang="ts">
    // Placeholder for waveform or state probe output
  </script>
  
  <div class="simulation-panel">
    <h2>üìà Simulation Output</h2>
    <div class="sim-frame">
      <p>Waveform output will be displayed here (Verilator JSON or VCD viewer).</p>
    </div>
  </div>
  
  <style>
    .simulation-panel {
      background: #0f172a;
      border: 1px solid #00ffee33;
      padding: 1rem;
      border-radius: 10px;
      height: 100%;
      display: flex;
      flex-direction: column;
      resize: vertical;
      overflow: auto;
      min-height: 200px;
    }
  
    .simulation-panel h2 {
      font-size: 16px;
      font-family: 'Orbitron', monospace;
      color: #00ffee;
      text-align: center;
      margin-top: 0;
    }
  
    .sim-frame {
      flex-grow: 1;
      background: #1e293b;
      border: 1px solid #00ffee55;
      color: #00ffee;
      padding: 1rem;
      border-radius: 6px;
      font-size: 13px;
      font-family: monospace;
    }
  </style>
  <script lang="ts">
    import { onMount } from 'svelte';
    import { writable } from 'svelte/store';
    import { Clock3 } from 'lucide-svelte';
    import { openProject, loadFile } from './api/FileAPI'; // Adjust path if needed
  
    // --- State Stores ---
    const openFiles = writable<string[]>([]); // Stores full file paths
    const activeFile = writable<string | null>(null);
    const fileContent = writable<string>('// No file open. Click üìÇ to open a project.');
    const projectName = writable('GPU');
    const isLoading = writable(false);
    const time = writable('00:00:00');
  
    // --- Helper to get just the filename from a full path ---
    function getFileName(fullPath: string): string {
      return fullPath.split(/[/\\]/).pop() || fullPath;
    }
    
    onMount(() => {
      let seconds = 0;
      const interval = setInterval(() => {
        seconds++;
        const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
        const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
        const s = (seconds % 60).toString().padStart(2, '0');
        time.set(`${h}:${m}:${s}`);
      }, 1000);
      return () => clearInterval(interval);
    });
  
    // --- Core Logic ---
    async function handleOpenProject() {
      console.log('[FRONTEND] Open Project button clicked.');
      if ($isLoading) return; // Prevent multiple clicks
     
      const path = prompt('Enter the FULL path to your project folder:');
      if (!path) {
        console.log('[FRONTEND] User cancelled prompt.');
        return;
      }
  
      isLoading.set(true);
      fileContent.set('// Opening project...');
      try {
        const files = await openProject(path);
        
        if (files.length === 0) {
          alert('No Verilog files (.v, .sv, .vh) found in that folder.');
          fileContent.set('// No Verilog files found. Try opening another folder.');
          openFiles.set([]);
          activeFile.set(null);
          return;
        }
        
        openFiles.set(files);
        projectName.set(getFileName(path));
  
        // Load the first file automatically
        await handleFileClick(files[0]);
  
      } catch (err) {
        console.error('[FRONTEND] Error opening project:', err);
        alert(`‚ùå Failed to open project.\n\nError: ${err.message}\n\nCheck the browser console (F12) and the backend terminal for more details.`);
        fileContent.set(`// Error opening project. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  
    async function handleFileClick(filePath: string) {
      if ($isLoading) return;
      console.log(`[FRONTEND] Tab clicked for: ${filePath}`);
      
      isLoading.set(true);
      activeFile.set(filePath);
      fileContent.set(`// Loading ${getFileName(filePath)}...`);
  
      try {
        const content = await loadFile(filePath);
        fileContent.set(content);
      } catch (err) {
        console.error(`[FRONTEND] Error loading file:`, err);
        alert(`‚ùå Failed to load file: ${getFileName(filePath)}.\n\nError: ${err.message}`);
        fileContent.set(`// Error loading file. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  </script>
  
  <div class="design-toolbar">
    <div class="left-group">
      <span class="project-name">{$projectName}</span>
      <div class="tabs" role="tablist">
        {#each $openFiles as file (file)}
          <button
            class="tab"
            class:active={file === $activeFile}
            type="button"
            on:click={() => handleFileClick(file)}
            disabled={$isLoading}
          >
            {getFileName(file)}
          </button>
        {/each}
      </div>
    </div>
  
    <div class="right-group">
      <button class="glow-btn" on:click={handleOpenProject} disabled={$isLoading} type="button" aria-label="Open Project Folder">
        {#if $isLoading}‚è≥{:else}üìÇ{/if}
      </button>
      <Clock3 class="clock-icon" />
      <span class="timer">{$time}</span>
    </div>
  </div>
  
  <style>
    /* Your styles are good. I've added a z-index to the button just in case. */
    .design-toolbar { width: 100%; height: 60px; background: linear-gradient(to right, #0f172a, #1a2332); border-bottom: 1px solid #00ffee55; display: flex; justify-content: space-between; align-items: center; padding: 0 1rem; color: #00ffee; font-family: 'Orbitron', monospace; box-sizing: border-box; }
    .left-group { display: flex; align-items: center; gap: 1rem; }
    .project-name { font-size: 14px; font-weight: bold; }
    .tabs { display: flex; gap: 0.25rem; align-items: center; }
    .tab { background: #1e293b; padding: 0.25rem 0.75rem; border-radius: 4px; color: #00ffeeaa; font-family: monospace; cursor: pointer; transition: background 0.2s; font-size: 13px; border: none; border-bottom: 2px solid transparent; }
    .tab:disabled { cursor: not-allowed; opacity: 0.6; }
    .tab.active { background: #00ffee22; color: #00ffee; border-bottom: 2px solid #00ffee; }
    .right-group { display: flex; align-items: center; gap: 0.75rem; }
    .glow-btn { background: transparent; border: 1px solid #00ffee44; color: #00ffee; padding: 0.2rem 0.6rem; border-radius: 6px; font-size: 16px; cursor: pointer; box-shadow: 0 0 6px #00ffee55; transition: background 0.2s; /* Add these two lines to prevent click issues */ position: relative; z-index: 99; }
    .glow-btn:hover { background: #00ffee22; }
    .glow-btn:disabled { cursor: not-allowed; opacity: 0.6; box-shadow: none; }
    .clock-icon { width: 18px; height: 18px; stroke: #00ffee; }
    .timer { font-weight: bold; font-size: 15px; }

    /* Your existing styles are fine, no changes needed here. */
    .design-toolbar {
      width: 100%;
      height: 60px;
      background: linear-gradient(to right, #0f172a, #1a2332);
      border-bottom: 1px solid #00ffee55;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1rem;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      box-sizing: border-box;
    }
    .left-group { display: flex; align-items: center; gap: 1rem; }
    .project-name { font-size: 14px; font-weight: bold; }
    .tabs { display: flex; gap: 0.25rem; align-items: center; }
    .tab {
      background: #1e293b;
      padding: 0.25rem 0.75rem;
      border-radius: 4px;
      color: #00ffeeaa;
      font-family: monospace;
      cursor: pointer;
      transition: background 0.2s;
      font-size: 13px;
      border: none;
      border-bottom: 2px solid transparent;
    }
    .tab.active { background: #00ffee22; color: #00ffee; border-bottom: 2px solid #00ffee; }
    .tab.new { background: #0d1117; border: 1px dashed #00ffee88; color: #00ffeecc; font-weight: bold; }
    .right-group { display: flex; align-items: center; gap: 0.75rem; }
    .glow-btn {
      background: transparent;
      border: 1px solid #00ffee44;
      color: #00ffee;
      padding: 0.2rem 0.6rem;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 0 6px #00ffee55;
      transition: background 0.2s;
    }
    .glow-btn:hover { background: #00ffee22; }
    .clock-icon { width: 18px; height: 18px; stroke: #00ffee; }
    .timer { font-weight: bold; font-size: 15px; }
  </style>
  
