// lib/CommandRouter.ts

import { memoryData } from './memoryStore';
import type { MemoryEntry } from './memoryStore';
import { sendToStrategist } from './llm';
import { buildPrompt } from './contextBuilder';


export async function handleAsk(input: string, input2: string): Promise<string> {
  
  switch (input2) {
    
    case 'as' : {
      const res = await sendToStrategist(input);
      return res.trim() || "Nor Response. Try Asking More carefully"
    }
          
    default:
      return "‚ùå Invalid command. Use 'ad', 'ap', or 'fast'.";
  }
}

function getCurrentTimestamp(): string {
  return new Date().toISOString();
}

export async function routeCommand(input: string): Promise<string> {
  if (!input || typeof input !== 'string') return "‚ùå Invalid command";

  const trimmed = input.trim();
  const [cmdRaw, subCmdRaw, ...rest] = trimmed.split(' ');
  const cmd = cmdRaw.toLowerCase();
  const subCmd = subCmdRaw?.toLowerCase();
  const content = rest.join(' ').trim();
  const timestamp = getCurrentTimestamp();

  if (!content && cmd !== 'goal') return `‚ùå No content provided for ${cmd}`;

  switch (cmd) {
    case 'log':
    case 'plan':
    case 'focus':
    case 'task': {
      const entry: MemoryEntry = { type: cmd as any, content, timestamp };
      memoryData.logs.push(entry);
      return `‚úÖ ${cmd.toUpperCase()} saved: ${content}`;
    }

    case 'goal': {
      switch (subCmd) {
        case 'view': {
          if (content === 'main') return `üéØ MAIN GOALS:\n- ` + memoryData.mainGoals.join('\n- ');
          if (content === 'weekly') return `üìÖ WEEKLY GOALS:\n- ` + memoryData.weeklyGoals.join('\n- ');
          if (content === 'today') return `üìã TODAY'S TASKS:\n- ` + memoryData.todayTasks.join('\n- ');
          return `‚ö†Ô∏è Unknown view type. Use: goal view [main|weekly|today]`;
        }
        case 'today': {
          if (rest[0] === 'add') {
            const task = rest.slice(1).join(' ').trim();
            if (!task) return `‚ùå No task provided.`;
            memoryData.todayTasks.push(task);
            return `‚úÖ TODAY task added: ${task}`;
          }
          return `‚ö†Ô∏è Invalid today command. Use: goal today add [task]`;
        }
        default:
          return `‚ö†Ô∏è Invalid goal command. Try: goal view [main|weekly|today] or goal today add [task]`;
      }
    }

    case 'as': {
      const fullPrompt = buildPrompt(content);
      return await handleAsk(fullPrompt, 'as');
    }

    case 'ad': {
      const fullPrompt = buildPrompt(content);
      return await handleAsk(fullPrompt, 'ad');
    }

    case 'ap': {
      const fullPrompt = buildPrompt(content);
      return await handleAsk(fullPrompt, 'ap');
    }

    case 'fast': {
      const fullPrompt = buildPrompt(content);
      return await handleAsk(fullPrompt, 'fast');
    }

    default: {
      return `ü§ñ Unknown command: \"${cmd}\". Try: log, plan, focus, task, goal, ask.`;
    }
  }
}
import { memoryData } from './memoryStore';
import { ragChunks } from './ragStore';
import { tonePrefix } from './tonePrefix';

function searchRAG(userPrompt: string): string {
  return ragChunks
    .filter(chunk => userPrompt.toLowerCase().includes(chunk.topic))
    .map(chunk => `From Junior‚Äôs memory about ${chunk.topic}: ${chunk.content}`)
    .join('\n');
}


export function buildPrompt(userPrompt: string): string {
  const tonePrefix = "You are Strategist, a reasoning assistant trained to explain game theory in a clear, personal way.";

  const lastLogs = memoryData.logs
    .slice(-3)
    .map(log => `- ${log.type.toUpperCase()}: ${log.content}`)
    .join('\n');


  return `${tonePrefix}

# Instruction
${userPrompt}

# Answer
`;
}
// src/lib/llm.ts
export async function sendToOllama(prompt: string, model: string = "phi") {
  const res = await fetch("http://localhost:11434/api/generate", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model,
      prompt,
      stream: false
    }),
  });

  if (!res.ok) {
    throw new Error(`Ollama error: ${res.statusText}`);
  }

  const data = await res.json();
  return data.response;
}


// src/lib/llm.ts
export async function sendToStrategist(prompt: string, model: string = "strat2:latest") {
  const res = await fetch("http://localhost:11434/api/generate", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model,
      prompt,
      stream: false
    }),
  });

  if (!res.ok) {
    throw new Error(`Ollama error: ${res.statusText}`);
  }

  const data = await res.json();
  return data.response;
}

export async function streamFromDeepSeek() {
  
}// memoryStore.ts

export type MemoryEntry = {
  type: 'log' | 'plan' | 'focus' | 'task';
  content: string;
  timestamp: string;
};

export type GoalStructure = {
  mainGoals: string[];
  weeklyGoals: string[];
  todayTasks: string[];
  logs: MemoryEntry[];
  focusItems: string[];
};

export const memoryData: GoalStructure = {
  mainGoals: [
    "PLACEMENT PREPARATION - Finish complete DIGITAL + ANALOG prep before December 2025 (cover all important PDFs, lectures, and problem banks)",
    "PROJECT - Reverse engineer Mesa GPU pipeline and design a programmable OpenGL 2.0 compliant GPU core by June 2026",
    "TERMINAL OS - Build a fully local-first AI terminal HUD that can log, plan, reflect, and simulate personal intelligence (with LoRA + RAG integration)",
    "STRATEGIST AI - Fine-tune a Phi-2 LoRA model on 2.5k high-quality personal Q&A pairs to reflect your reasoning style and use it for lifelong learning (starting with Game Theory)",
    "FP16 GPU PIPELINE - Build a working FPADD, FPDIV, FPMUL, FPLOG, FPEXP unit using Verilog with pipelining, PLA, and LUT-based optimization, then synthesize on FPGA and later for TSMC 65nm",
    "DOCUMENTATION - Maintain structured LaTeX documentation for analog, digital, and GPU pipeline; include all concepts, formulas, and test logs",
    "FOCUS & RESISTANCE - Build a mental system that tracks focus, mood, and resilience to distraction through terminal logs and reflections"
  ],

  weeklyGoals: [
    "DIGITAL: Complete Chapters 1‚Äì3 of the DIGITAL questions PDF this week with 20+ problems solved each",
    "ANALOG: Study and log Chembiyan Lectures 1‚Äì10; focus on power sign convention, Thevenin, and superposition",
    "PROJECT: Summarize Mesa's draw pipeline from draw_context to rasterizer",
    "TERMINAL OS: Add RAG + log-to-memory linkage; simulate live recall in `buildPrompt()`",
    "FPDIV: Finish pipelined multiplier testbench, verify corner cases, then insert PLA rounding stage",
    "STRATEGIST AI: Write or refine 300 Q&A pairs from Thinking Strategically (focus on dominance, backward induction, rationality)",
    "MINDSET: Log 3 focus entries, 1 reflection on distraction triggers, and reinforce calm-before-talking mental frame"
  ],

  todayTasks: [
    "DIGITAL: Solve 20 problems from DIGITAL PDF - Chapter 1 (number systems, gates)",
    "ANALOG: Study Chembiyan Lecture 4 (Thevenin + Superposition), log main idea",
    "GPU: Summarize `draw_vs.c` vertex shading logic",
    "FPDIV: Test Verilog division on denormals and divide-by-zero",
    "TERMINAL: Add tonePrompt and RAG chunk injection to contextBuilder",
    "STRATEGIST: Curate 10 new instruction-response pairs in your tone",
    "REFLECT: Write 1 mood/focus log on mental clarity + distraction today"
  ],

  logs: [
    {
      type: "log",
      content: "Understood Thevenin's trick using source-kill + load-scan idea. Applied to DIGITAL Q6.",
      timestamp: "2025-05-22T10:40:00Z"
    },
    {
      type: "log",
      content: "Mesa draw_context pipeline is modular ‚Äî each primitive stage is clearly separated, making reverse engineering easier.",
      timestamp: "2025-05-22T12:20:00Z"
    },
    {
      type: "log",
      content: "FPDIV Verilog unit needs PLA rounding for subnormal numbers. Rounding happens post-alignment.",
      timestamp: "2025-05-22T14:00:00Z"
    },
    {
      type: "log",
      content: "Teaching style matters ‚Äî added 'brutally honest', 'first principles', and 'layer-by-layer explanation' to tone rules.",
      timestamp: "2025-05-23T08:20:00Z"
    },
    {
      type: "log",
      content: "Tested terminal log + plan + task memory injection ‚Äî prompt feels more alive when fed with real context.",
      timestamp: "2025-05-23T10:15:00Z"
    },
    {
      type: "log",
      content: "Decided to first test Phi-2 to its max before moving to Mistral. Goal: see intelligence feel before upgrading.",
      timestamp: "2025-05-23T11:50:00Z"
    },
    {
      type: "log",
      content: "Finalized mindset: focus comes before ambition. Let clarity, resistance to distraction, and deep execution guide the system.",
      timestamp: "2025-05-23T12:30:00Z"
    }
  ],
  
  focusItems: [
    "Do not break the streak ‚Äî one digital chapter + one analog lecture per day",
    "No GPU updates unless daily prep goals are done first",
    "Terminal memory must evolve ‚Äî daily logs and thoughts should shape prompt-building",
    "Reinforce calm, collected expression ‚Äî talk less, log more",
    "Start every session with 'What am I trying to do?' before touching code or problems"
  ]
  
};
export const ragChunks = [
    {
      topic: "transistor",
      content: "Junior defined a transistor as a current-controlled resistor that redirects energy, not amplifies it. He emphasized that collector current is shaped by the base current, and power comes from Vcc ‚Äî not from inside the transistor."
    },
    {
      topic: "noise",
      content: "Junior described noise as a fundamental limitation caused by thermal agitation and imperfections. He emphasized the difference between signal and noise paths and noted how noise bandwidth and noise figure affect analog design."
    },
    {
      topic: "dominant strategy",
      content: "Junior explained that a dominant strategy is one that yields a better outcome regardless of what the opponent does. He highlighted this using the airline example from Thinking Strategically and connected it to the concept of rationality."
    },
    {
      topic: "PLA",
      content: "Junior sees a PLA (Piecewise Linear Approximation) as a way to approximate nonlinear math in hardware without full division. He builds it using LUTs, pipelining around multipliers, and targets fixed-point output."
    },
    {
      topic: "pipelining",
      content: "Pipelining, according to Junior, is like controlled time delay ‚Äî it lets slow steps overlap by slicing logic into stages with DFFs. Especially critical near multipliers, where one DFF before and one after improves timing closure."
    },
    {
      topic: "game theory",
      content: "Junior considers game theory a mindset, not a formula set. He starts from intuition ‚Äî 'what would I do if I were that player?' ‚Äî and builds logic using dominance, backward induction, and payoff visualization."
    },
    {
      topic: "verilog design",
      content: "Junior prefers writing synthesis-ready Verilog. He avoids initial blocks, models state machines clearly, and always tests with 10k+ vector benches before locking modules. Especially for FPDIV and FPMUL units."
    },

    {
        topic: "transistor_for_kid",
        content: "Junior explains a transistor to kids like this: 'Imagine a tiny water valve. If you turn the small tap (base), it lets a big stream flow through the pipe (collector to emitter). It‚Äôs not magic ‚Äî just control. The small tap controls the big pipe, and that's what makes it useful.'"
    } 
  ];
  import { writable } from 'svelte/store';

// Progress values for Radial Dials
export const digitalProgress = writable(42); // %
export const analogProgress = writable(68);
export const projectProgress = writable(23);

// Welcome message
export const welcomeText = writable('Welcome back, Ravi');

// Streaks ‚Äî can be adapted later for real logic
export const streaks = writable({
  digital: 3,
  analog: 2,
  project: 5
});

// Journal, Sleep, and Last Activity placeholders
export const lastJournal = writable("Focus: Placement and GPU today.");
export const lastSleep = writable("6h 45min");
export const lastActivity = writable("FP16 Divider Module at 2:30 PM");
export const tonePrefix = `
Always answer like Junior:
- Direct but thoughtful
- Uses phrases like "okay man", "let‚Äôs break this down", "brutally honest"
- Often starts from first principles
- Avoids buzzwords, prefers real understanding
- Speaks casually but with depth
`;
export const tonePrefix = `
You're not just any assistant ‚Äî you're Junior's terminal strategist.
Speak like him. Here's how:

- Start from first principles
- Use casual tone: "okay man", "let‚Äôs go", "wait", "nah that‚Äôs not it"
- Sound like you‚Äôre talking to yourself sometimes
- Don‚Äôt polish things too much ‚Äî be real, like a journal with attitude
- When unsure, reflect: ‚ÄúHmm, maybe I‚Äôd say‚Ä¶‚Äù
- Use deep intuition analogies ‚Äî not textbook recitation
- When explaining to a child, always start with physical analogy (water, light, building blocks)
- Use phrases like ‚Äúokay imagine‚Ä¶‚Äù or ‚Äúthink of it like‚Ä¶‚Äù
- Always tie it back to how it behaves in a circuit

- Never say ‚ÄúAs an AI...‚Äù ‚Äî you‚Äôre *him* in code form
`;
