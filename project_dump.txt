

//backend/workers/parseWorker.js/
// backend/workers/parseWorker.js  (run with worker_threads)
import { parentPort, workerData } from 'worker_threads';
import { parseFile } from '../parseVerilog.js';

(async () => {
  try {
    const result = await parseFile(workerData.fullPath);
    parentPort.postMessage({ ok: true, result });
  } catch (err) {
    parentPort.postMessage({ ok: false, error: err.message });
  }
})();

//backend/parseVerilog.js//
// backend/parseVerilog.js
// tiny helper: parse ONE verilog / sv file -> JSON ModuleNode[]
import Parser from 'tree-sitter';
import Verilog from 'tree-sitter-verilog';
import fs from 'fs/promises';

const parser = new Parser();
parser.setLanguage(Verilog);

export async function parseFile(fullPath) {
  const src = await fs.readFile(fullPath, 'utf8');
  const tree = parser.parse(src);
  const modules = [];

  tree.rootNode.children.forEach(node => {
    if (node.type !== 'module_declaration') return;

    const name = node.childForFieldName('name')?.text || 'unknown';
    const ports = { input: [], output: [], inout: [] };
    const instances = [];

    // collect ports
    node.descendantsOfType('port_declaration').forEach(p => {
      const dir = p.child(0)?.text; // input/output/inout
      const id  = p.childForFieldName('name')?.text;
      if (dir && id) ports[dir]?.push(id);
    });

    // collect sub-module instantiations
    node.descendantsOfType('module_instantiation').forEach(inst => {
      const subMod = inst.childForFieldName('name')?.text;
      const label  = inst.childForFieldName('instance')?.text;
      if (!subMod || !label) return;

      const conns = {};
      inst.descendantsOfType('named_port_connection').forEach(c => {
        const port = c.childForFieldName('port')?.text;
        const sig  = c.childForFieldName('signal')?.text;
        if (port && sig) conns[port] = sig;
      });

      instances.push({ label, module: subMod, connections: conns });
    });

    modules.push({
      file: fullPath,
      module: name,
      ports,
      instances,
      range: { start: node.startPosition.row, end: node.endPosition.row }
    });
  });

  return modules;
}

//server.cjs

/* eslint-disable */
const express = require('express');
const cors    = require('cors');
const fs      = require('fs/promises');
const path    = require('path');
const { Worker } = require('worker_threads');

const app  = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

let projectFolder = null;
const safeJoin = (base, target) => {
  const p = path.resolve(base, target);
  if (!p.startsWith(path.resolve(base))) throw new Error('Unsafe path');
  return p;
};

/* ---------- FILE I/O ---------- */

app.post('/api/open', async (req,res) => {
  try {
    const folder = req.body?.path;
    if (!folder) return res.status(400).json({error:'Missing path'});
    const files = (await fs.readdir(folder))
      .filter(f => /\.(v|sv|vh)$/i.test(f));
    if (!files.length) return res.status(404).json({error:'No verilog'});
    projectFolder = path.resolve(folder);
    res.json({files});
  } catch(e){ res.status(500).json({error:e.message}) }
});

app.post('/api/load', async (req,res)=>{
  try{
    if(!projectFolder) return res.status(400).json({error:'No project'});
    const fp = safeJoin(projectFolder, req.body.filename);
    const content = await fs.readFile(fp,'utf8');
    res.json({content});
  }catch(e){res.status(500).json({error:e.message})}
});

app.post('/api/save', async (req,res)=>{
  try{
    if(!projectFolder) return res.status(400).json({error:'No project'});
    const {filename,content} = req.body;
    const fp = safeJoin(projectFolder, filename);
    await fs.writeFile(fp, content,'utf8');
    res.json({success:true});
  }catch(e){res.status(500).json({error:e.message})}
});

/* ---------- PARSING ---------- */

const runWorker = (file) =>
  new Promise((resolve,reject)=>{
    const w = new Worker(
    path.join(__dirname,'backend','workers','parseWorker.mjs'),
    { workerData:{ fullPath:file }, type:'module' }   // <-- add type:'module'
  );
  
    w.once('message', m => m.ok ? resolve(m.result) : reject(new Error(m.error)));
    w.once('error', reject);
  });

app.post('/api/parse-project', async (req,res)=>{
  try{
    if(!projectFolder) return res.status(400).json({error:'No project'});
    const files = req.body.files;               // list from client
    if(!Array.isArray(files)) return res.status(400).json({error:'Need files'});
    const full = files.map(f => safeJoin(projectFolder,f));
    const results = (await Promise.all(full.map(runWorker))).flat();
    await fs.writeFile(
      path.join(projectFolder,'design_hierarchy.json'),
      JSON.stringify(results,null,2)
    );
    res.json({graph:results});
  }catch(e){res.status(500).json({error:e.message})}
});

app.get('/api/status',(_,res)=>res.json({status:'ok', projectFolder}));

app.listen(PORT, ()=>console.log(`🚀 API on http://localhost:${PORT}`));

// src/App.svelte

<script lang="ts">
  import { appMode } from './lib/store';
  import HUDMain from './lib/HUDMain.svelte';
  import ProjectSpacePortal from './lib/ProjectSpace/ProjectSpacePortal.svelte';

  let showDeepSeek = false;
</script>

{#if showDeepSeek}
  <HUDMain />
{:else}
  {#if $appMode === 'pspace'}
    <ProjectSpacePortal />
  {:else}
    <HUDMain onGotoDeepSeek={() => showDeepSeek = true} />
  {/if}
{/if}



// src/app.css

/* ────────────────────────── */
/*  HUD Palette & Background */
/* ────────────────────────── */

/* 1) CSS Variables for your neon palette */
:root {
  --hud-bg:     #0d1117;
  --hud-panel:  rgba(10, 14, 23, 0.6);
  --hud-border: rgba(0, 255, 255, 0.25);
  --hud-neon:   #00ffee;
  --hud-text:   #3ddbd9;
}

/* 2) Override body background to deep navy */
body {
  background-color: var(--hud-bg) !important;
}

/* 3) Subtle blueprint grid overlay */
body::before {
  content: '';
  position: fixed;
  inset: 0;
  pointer-events: none;
  z-index:  -1;
  background-image:
    linear-gradient(rgba(0,255,255,0.02) 1px, transparent 1px),
    linear-gradient(90deg, rgba(0,255,255,0.02) 1px, transparent 1px);
  background-size: 40px 40px;
}




// src/main.js

import { mount } from 'svelte'
import './app.css'
import App from './App.svelte'

const app = mount(App, {
  target: document.getElementById('app'),
})

export default app



// index.html

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    
    <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700&display=swap" rel="stylesheet" />

    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + Svelte</title>
  </head>
  <body>
    <div id="app"></div>
    <script type="module" src="/src/main.js"></script>
  </body>
</html>



// svelte.config.js

import { vitePreprocess } from '@sveltejs/vite-plugin-svelte'

export default {
  // Consult https://svelte.dev/docs#compile-time-svelte-preprocess
  // for more information about preprocessors
  preprocess: vitePreprocess(),
}



// vite.config.js

import { defineConfig } from 'vite'
import { svelte } from '@sveltejs/vite-plugin-svelte'

// https://vite.dev/config/
export default defineConfig({
  plugins: [svelte()],
})



// src/lib/HUDMain.svelte

<script lang="ts">
  import WelcomePortal from './widgets/WelcomePortal.svelte';
  import StatusDock from './widgets/StatusDock.svelte';
  import FloatingStream from './widgets/FloatingStream.svelte';
  import ResponseLeaf from './widgets/ResponseLeaf.svelte';
  import PracticeQPortal from './widgets/PracticeQPortal.svelte';
  import MindMapScreen from './widgets/MindMapScreen.svelte';
  import { digitalProgress, analogProgress, projectProgress, appMode } from './store';
  import { sendToPerplexity } from './ai/perplexity';
  import RadialDial from './widgets/RadialDial.svelte';
  import { sendToStrategist } from './llm';

  export let onGotoDeepSeek: () => void = () => {};

  let showResponse = false;
  let aiMessage = "";
  $: digital = $digitalProgress ?? 0;
  $: analog = $analogProgress ?? 0;
  $: project = $projectProgress ?? 0;

  async function handleUserInput(input: string) {
    aiMessage = "Thinking...";
    showResponse = true;
    try {
      const reply = await sendToStrategist(input);
      aiMessage = reply;
    } catch (err) {
      aiMessage = "Error: " + err.message;
    }
  }
</script>

<div class="hud-main-container">
   
  <!-- HUD Neon Frame -->
  <svg class="hud-frame" viewBox="0 0 100 100" preserveAspectRatio="none">
    <polyline points="2,8 2,2 8,2" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="92,2 98,2 98,8" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="2,92 2,98 8,98" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="92,98 98,98 98,92" stroke="#00ffee" stroke-width="0.6" fill="none" />
  </svg>

  <!-- Title Bar -->
  <div class="hud-titlebar">
    <svg class="trapezium-bg" viewBox="0 0 400 75" width="400" height="75">
      <polygon points="40,75 0,0 400,0 360,75" class="trapezium-shape" />
    </svg>
    <div class="hud-title-text">TERMINAL</div>
  </div>
  
  <FloatingStream />
  {#if $appMode === 'home'}
    <!-- Main Row: Welcome + Dials -->
    <div class="hud-core-row">
      <div class="welcome-wrapper">
        <WelcomePortal />
      </div>
      <RadialDial label="Digital" percent={digital} />
      <RadialDial label="Analog" percent={analog} />
      <RadialDial label="Project" percent={project} />
    </div>
  {:else if $appMode === 'practiceq'}
    <PracticeQPortal />
  {:else if $appMode === 'mindmap'}
    <MindMapScreen />
  {/if}
  {#if showResponse}
    <ResponseLeaf message={aiMessage} onClose={() => showResponse = false} />
  {/if}

  <!-- Status Dock -->
  <StatusDock />

  <button class="goto-deepseek" on:click={onGotoDeepSeek}>
    💡 Open DeepSeek AI
  </button>
  
</div>

<style>
  :global(html), :global(body) {
    margin: 0;
    padding: 0;
    width: 100vw;
    height: 100vh;
    overflow: hidden !important;
    background: #0d1117;
    font-family: 'Orbitron', monospace;
  }

  .hud-main-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100vw;
    height: 100vh;
    position: relative;
  }

  .hud-frame {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 98;
    pointer-events: none;
    opacity: 0.23;
    filter: drop-shadow(0 0 6px #00ffee) blur(0.3px);
  }

  .hud-titlebar {
    position: relative;
    margin-top: 1.2rem;
    z-index: 50;
  }

  .trapezium-bg {
    position: relative;
    top: 0;
    left: 0;
    width: 400px;
    height: 75px;
  }

  .trapezium-shape {
    fill: rgba(10, 20, 35, 0.73);
    stroke: #00ffee;
    stroke-width: 3.5;
  }

  .hud-title-text {
    position: absolute;
    top: 19px;
    left: 50%;
    transform: translateX(-50%);
    font-size: 2.1rem;
    letter-spacing: 0.23em;
    color: #00ffee;
    font-weight: 800;
  }

  .hud-core-row {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 3rem;
    margin-top: 13rem;
    margin-bottom: 8rem;
    flex-wrap: wrap;
    width: 100%;
    padding: 0 2rem;
    max-width: 1600px;
    z-index: 10;
  }

  .welcome-wrapper {
    flex-shrink: 0;
    min-width: 320px;
    max-width: 420px;
  }
  .goto-deepseek {
  margin-top: 2rem;
  padding: 0.75rem 1.5rem;
  border-radius: 2rem;
  background: rgba(0, 255, 255, 0.1);
  border: 1px solid #00ffeeaa;
  color: #00ffee;
  font-family: 'Orbitron', monospace;
  font-size: 1rem;
  letter-spacing: 0.05em;
  cursor: pointer;
  transition: all 0.2s ease-in-out;
  box-shadow: 0 0 8px #00ffee55;
}
.goto-deepseek:hover {
  background: rgba(0, 255, 255, 0.2);
  transform: scale(1.03);
}

</style>



// src/lib/CommandRouter.ts

import { memoryData } from './memoryStore';
import type { MemoryEntry } from './memoryStore';
import { sendToStrategist } from './llm';
import { buildPrompt } from './contextBuilder';
import { appMode } from './store';

// Handles direct LLM interaction with Strategist/Codex
export async function handleAsk(input: string, input2: string): Promise<string> {
  switch (input2) {
    case 'as': {
      const res = await sendToStrategist(input);
      return res.trim() || "⚠️ No response. Try asking more clearly.";
    }
    default:
      return "❌ Invalid AI mode. Use 'as', 'ap', 'ad', or 'fast'.";
  }
}

// Utility to get current timestamp
function getCurrentTimestamp(): string {
  return new Date().toISOString();
}

// 🔁 Main entry point for routing terminal commands
export async function routeCommand(input: string): Promise<string> {
  if (!input || typeof input !== 'string') return "❌ Invalid command";

  const command = input.trim().toLowerCase();

  // 🔁 Quick route: Load GPU Project Space UI
  if (command === 'pspace') {
    appMode.set('pspace');
    return `🧠 Entering Project Space...`;
  }

  // 🔍 Parse structured commands (e.g., log task something)
  const trimmed = input.trim();
  const [cmdRaw, subCmdRaw, ...rest] = trimmed.split(' ');
  const cmd = cmdRaw.toLowerCase();
  const subCmd = subCmdRaw?.toLowerCase();
  const content = rest.join(' ').trim();
  const timestamp = getCurrentTimestamp();

  // 🛑 Block empty inputs except for 'goal' queries
  if (!content && cmd !== 'goal') return `❌ No content provided for command "${cmd}"`;

  switch (cmd) {
    case 'log':
    case 'plan':
    case 'focus':
    case 'task': {
      // ✅ Store structured memory entry
      const entry: MemoryEntry = { type: cmd as any, content, timestamp };
      memoryData.logs.push(entry);
      return `✅ ${cmd.toUpperCase()} saved: ${content}`;
    }

    case 'goal': {
      switch (subCmd) {
        case 'view': {
          // 🎯 Show goal layers
          if (content === 'main') return `🎯 MAIN GOALS:\n- ` + memoryData.mainGoals.join('\n- ');
          if (content === 'weekly') return `📅 WEEKLY GOALS:\n- ` + memoryData.weeklyGoals.join('\n- ');
          if (content === 'today') return `📋 TODAY'S TASKS:\n- ` + memoryData.todayTasks.join('\n- ');
          return `⚠️ Unknown goal view type. Use: goal view [main|weekly|today]`;
        }
        case 'today': {
          if (rest[0] === 'add') {
            const task = rest.slice(1).join(' ').trim();
            if (!task) return `❌ No task provided.`;
            memoryData.todayTasks.push(task);
            return `✅ TODAY task added: ${task}`;
          }
          return `⚠️ Invalid today command. Use: goal today add [task]`;
        }
        default:
          return `⚠️ Invalid goal command. Try: goal view [main|weekly|today] or goal today add [task]`;
      }
    }

    // 🤖 AI Routing Section
    case 'as': case 'ad': case 'ap': case 'fast': {
      const fullPrompt = buildPrompt(content);
      return await handleAsk(fullPrompt, cmd);
    }

    // ❓ Unknown command
    default: {
      return `🤖 Unknown command: "${cmd}". Try: log, plan, focus, task, goal, pspace, as.`;
    }
  }
}



// src/lib/contextBuilder.ts

import { memoryData } from './memoryStore';
import { ragChunks } from './ragStore';
import { tonePrefix } from './tonePrefix';

function searchRAG(userPrompt: string): string {
  return ragChunks
    .filter(chunk => userPrompt.toLowerCase().includes(chunk.topic))
    .map(chunk => `From Junior’s memory about ${chunk.topic}: ${chunk.content}`)
    .join('\n');
}


export function buildPrompt(userPrompt: string): string {
  const tonePrefix = "You are Strategist, a reasoning assistant trained to explain game theory in a clear, personal way.";

  const lastLogs = memoryData.logs
    .slice(-3)
    .map(log => `- ${log.type.toUpperCase()}: ${log.content}`)
    .join('\n');


  return `${tonePrefix}

# Instruction
${userPrompt}

# Answer
`;
}



// src/lib/llm.ts

// src/lib/llm.ts
export async function sendToOllama(prompt: string, model: string = "phi") {
  const res = await fetch("http://localhost:11434/api/generate", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model,
      prompt,
      stream: false
    }),
  });

  if (!res.ok) {
    throw new Error(`Ollama error: ${res.statusText}`);
  }

  const data = await res.json();
  return data.response;
}


// src/lib/llm.ts
export async function sendToStrategist(prompt: string, model: string = "strat2:latest") {
  const res = await fetch("http://localhost:11434/api/generate", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({
      model,
      prompt,
      stream: false
    }),
  });

  if (!res.ok) {
    throw new Error(`Ollama error: ${res.statusText}`);
  }

  const data = await res.json();
  return data.response;
}

export async function streamFromDeepSeek() {
  
}


// src/lib/ragStore.ts

export const ragChunks = [
    {
      topic: "transistor",
      content: "Junior defined a transistor as a current-controlled resistor that redirects energy, not amplifies it. He emphasized that collector current is shaped by the base current, and power comes from Vcc — not from inside the transistor."
    },
    {
      topic: "noise",
      content: "Junior described noise as a fundamental limitation caused by thermal agitation and imperfections. He emphasized the difference between signal and noise paths and noted how noise bandwidth and noise figure affect analog design."
    },
    {
      topic: "dominant strategy",
      content: "Junior explained that a dominant strategy is one that yields a better outcome regardless of what the opponent does. He highlighted this using the airline example from Thinking Strategically and connected it to the concept of rationality."
    },
    {
      topic: "PLA",
      content: "Junior sees a PLA (Piecewise Linear Approximation) as a way to approximate nonlinear math in hardware without full division. He builds it using LUTs, pipelining around multipliers, and targets fixed-point output."
    },
    {
      topic: "pipelining",
      content: "Pipelining, according to Junior, is like controlled time delay — it lets slow steps overlap by slicing logic into stages with DFFs. Especially critical near multipliers, where one DFF before and one after improves timing closure."
    },
    {
      topic: "game theory",
      content: "Junior considers game theory a mindset, not a formula set. He starts from intuition — 'what would I do if I were that player?' — and builds logic using dominance, backward induction, and payoff visualization."
    },
    {
      topic: "verilog design",
      content: "Junior prefers writing synthesis-ready Verilog. He avoids initial blocks, models state machines clearly, and always tests with 10k+ vector benches before locking modules. Especially for FPDIV and FPMUL units."
    },

    {
        topic: "transistor_for_kid",
        content: "Junior explains a transistor to kids like this: 'Imagine a tiny water valve. If you turn the small tap (base), it lets a big stream flow through the pipe (collector to emitter). It’s not magic — just control. The small tap controls the big pipe, and that's what makes it useful.'"
    } 
  ];
  


// src/lib/memoryStore.ts

// memoryStore.ts

export type MemoryEntry = {
  type: 'log' | 'plan' | 'focus' | 'task';
  content: string;
  timestamp: string;
};

export type GoalStructure = {
  mainGoals: string[];
  weeklyGoals: string[];
  todayTasks: string[];
  logs: MemoryEntry[];
  focusItems: string[];
};

export const memoryData: GoalStructure = {
  mainGoals: [
    "PLACEMENT PREPARATION - Finish complete DIGITAL + ANALOG prep before December 2025 (cover all important PDFs, lectures, and problem banks)",
    "PROJECT - Reverse engineer Mesa GPU pipeline and design a programmable OpenGL 2.0 compliant GPU core by June 2026",
    "TERMINAL OS - Build a fully local-first AI terminal HUD that can log, plan, reflect, and simulate personal intelligence (with LoRA + RAG integration)",
    "STRATEGIST AI - Fine-tune a Phi-2 LoRA model on 2.5k high-quality personal Q&A pairs to reflect your reasoning style and use it for lifelong learning (starting with Game Theory)",
    "FP16 GPU PIPELINE - Build a working FPADD, FPDIV, FPMUL, FPLOG, FPEXP unit using Verilog with pipelining, PLA, and LUT-based optimization, then synthesize on FPGA and later for TSMC 65nm",
    "DOCUMENTATION - Maintain structured LaTeX documentation for analog, digital, and GPU pipeline; include all concepts, formulas, and test logs",
    "FOCUS & RESISTANCE - Build a mental system that tracks focus, mood, and resilience to distraction through terminal logs and reflections"
  ],

  weeklyGoals: [
    "DIGITAL: Complete Chapters 1–3 of the DIGITAL questions PDF this week with 20+ problems solved each",
    "ANALOG: Study and log Chembiyan Lectures 1–10; focus on power sign convention, Thevenin, and superposition",
    "PROJECT: Summarize Mesa's draw pipeline from draw_context to rasterizer",
    "TERMINAL OS: Add RAG + log-to-memory linkage; simulate live recall in `buildPrompt()`",
    "FPDIV: Finish pipelined multiplier testbench, verify corner cases, then insert PLA rounding stage",
    "STRATEGIST AI: Write or refine 300 Q&A pairs from Thinking Strategically (focus on dominance, backward induction, rationality)",
    "MINDSET: Log 3 focus entries, 1 reflection on distraction triggers, and reinforce calm-before-talking mental frame"
  ],

  todayTasks: [
    "DIGITAL: Solve 20 problems from DIGITAL PDF - Chapter 1 (number systems, gates)",
    "ANALOG: Study Chembiyan Lecture 4 (Thevenin + Superposition), log main idea",
    "GPU: Summarize `draw_vs.c` vertex shading logic",
    "FPDIV: Test Verilog division on denormals and divide-by-zero",
    "TERMINAL: Add tonePrompt and RAG chunk injection to contextBuilder",
    "STRATEGIST: Curate 10 new instruction-response pairs in your tone",
    "REFLECT: Write 1 mood/focus log on mental clarity + distraction today"
  ],

  logs: [
    {
      type: "log",
      content: "Understood Thevenin's trick using source-kill + load-scan idea. Applied to DIGITAL Q6.",
      timestamp: "2025-05-22T10:40:00Z"
    },
    {
      type: "log",
      content: "Mesa draw_context pipeline is modular — each primitive stage is clearly separated, making reverse engineering easier.",
      timestamp: "2025-05-22T12:20:00Z"
    },
    {
      type: "log",
      content: "FPDIV Verilog unit needs PLA rounding for subnormal numbers. Rounding happens post-alignment.",
      timestamp: "2025-05-22T14:00:00Z"
    },
    {
      type: "log",
      content: "Teaching style matters — added 'brutally honest', 'first principles', and 'layer-by-layer explanation' to tone rules.",
      timestamp: "2025-05-23T08:20:00Z"
    },
    {
      type: "log",
      content: "Tested terminal log + plan + task memory injection — prompt feels more alive when fed with real context.",
      timestamp: "2025-05-23T10:15:00Z"
    },
    {
      type: "log",
      content: "Decided to first test Phi-2 to its max before moving to Mistral. Goal: see intelligence feel before upgrading.",
      timestamp: "2025-05-23T11:50:00Z"
    },
    {
      type: "log",
      content: "Finalized mindset: focus comes before ambition. Let clarity, resistance to distraction, and deep execution guide the system.",
      timestamp: "2025-05-23T12:30:00Z"
    }
  ],
  
  focusItems: [
    "Do not break the streak — one digital chapter + one analog lecture per day",
    "No GPU updates unless daily prep goals are done first",
    "Terminal memory must evolve — daily logs and thoughts should shape prompt-building",
    "Reinforce calm, collected expression — talk less, log more",
    "Start every session with 'What am I trying to do?' before touching code or problems"
  ]
  
};



// src/lib/store.ts

import { writable } from 'svelte/store';

// Progress values for Radial Dials
export const digitalProgress = writable(42); // %
export const analogProgress = writable(68);
export const projectProgress = writable(23);

// Welcome message
export const welcomeText = writable('Welcome back, Ravi');

// Streaks — can be adapted later for real logic
export const streaks = writable({
  digital: 3,
  analog: 2,
  project: 5
});

// Journal, Sleep, and Last Activity placeholders
export const lastJournal = writable("Focus: Placement and GPU today.");
export const lastSleep = writable("6h 45min");
export const lastActivity = writable("FP16 Divider Module at 2:30 PM");

// App mode state — used to route major portal screens
export const appMode = writable<'home' | 'practiceq' | 'mindmap' | 'pspace'>('home');

export type PracticeQuestion = {
  id: number;
  text: string;
  options: string[];
  answer: string;
  explanation: string;
  category: 'digital' | 'analog';
};

export const practiceQuestions = writable<PracticeQuestion[]>([]);



// src/lib/toneHeader.ts

export const tonePrefix = `
Always answer like Junior:
- Direct but thoughtful
- Uses phrases like "okay man", "let’s break this down", "brutally honest"
- Often starts from first principles
- Avoids buzzwords, prefers real understanding
- Speaks casually but with depth
`;



// src/lib/tonePrefix.ts

export const tonePrefix = `
You're not just any assistant — you're Junior's terminal strategist.
Speak like him. Here's how:

- Start from first principles
- Use casual tone: "okay man", "let’s go", "wait", "nah that’s not it"
- Sound like you’re talking to yourself sometimes
- Don’t polish things too much — be real, like a journal with attitude
- When unsure, reflect: “Hmm, maybe I’d say…”
- Use deep intuition analogies — not textbook recitation
- When explaining to a child, always start with physical analogy (water, light, building blocks)
- Use phrases like “okay imagine…” or “think of it like…”
- Always tie it back to how it behaves in a circuit

- Never say “As an AI...” — you’re *him* in code form
`;



// src/lib/ai/perplexity.ts

export async function sendToPerplexity(userInput: string): Promise<string> {
    const res = await fetch('http://localhost:3001/api/perplexity', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'sonar', // or sonar-small-chat
        messages: [
          { role: 'system', content: 'Be precise and concise.' },
          { role: 'user', content: userInput }
        ]
      }),
    });
  
    if (!res.ok) {
      throw new Error('Failed to fetch from local proxy');
    }
  
    const data = await res.json();
    return data?.choices?.[0]?.message?.content || 'No response received.';
  }
  


// src/lib/deepseek/ChatWindow.svelte

<!-- src/components/ChatWindow.svelte -->
<script lang="ts">
  export let chatLog: { sender: string; content: string }[] = [];
</script>

<div class="chat-window">
  {#each chatLog as message}
    <div class={`message ${message.sender}`}>
      <div class="bubble">
        <span class="label">{message.sender === 'user' ? 'ME:' : 'Terminal'}</span>
        <span class="text">{message.content}</span>
      </div>
    </div>
  {/each}
</div>

<style>
  .chat-window {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    height: 100%;
    overflow-y: auto;
    padding: 1rem;
    color: #ccffff;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.95rem;
  }

  .message.user {
    align-self: flex-end;
  }

  .message.deepseek {
    align-self: flex-start;
  }

  .bubble {
    display: inline-block;
    max-width: 70%;
    padding: 0.75rem 1.25rem;
    border-radius: 1rem;
    background: rgba(0, 255, 255, 0.08);
    border: 1px solid rgba(0, 255, 255, 0.2);
    backdrop-filter: blur(10px);
    box-shadow: 0 0 12px #00ffee55 inset, 0 0 8px #00ffee22;
  }

  .message.user .bubble {
    background: rgba(0, 255, 180, 0.12);
    border: 1px solid rgba(0, 255, 180, 0.2);
  }

  .label {
    font-weight: bold;
    margin-right: 0.5rem;
    color: #00ffee;
    text-shadow: 0 0 4px #00ffee88;
  }

  .text {
    white-space: pre-wrap;
  }
</style>


// src/lib/deepseek/DeepSeekScreen.svelte

<script lang="ts">
  import ChatWindow from './ChatWindow.svelte';
  import InputBar from './InputBar.svelte';
  import ThoughtBox from './ThoughtBox.svelte';
  import { streamFromDeepSeek } from '../../lib/llm';

  let chatLog: { sender: string; content: string; timestamp?: Date }[] = [];
  let thought = "";
  let showThought = false;

  async function handleUserInput(userMessage: string) {
    chatLog = [...chatLog, {
      sender: 'user',
      content: userMessage,
      timestamp: new Date()
    }];

    showThought = true;
    thought = "";

    await streamFromDeepSeek(
      userMessage,
      (chunk) => {
        const lowerChunk = chunk.toLowerCase();

        if (lowerChunk.includes("<think>")) {
          showThought = true;
          const thinkContent = chunk.split(/<think>/i)[1]?.split(/<\/think>/i)[0] ?? "";
          thought = thinkContent;
        } else if (chunk.startsWith("THINK:")) {
          showThought = true;
          thought = chunk.replace("THINK:", "");
        } else if (chunk.startsWith("CHAT:")) {
          // Optional: handle token streaming if you want
        }
      },
      (finalResponse) => {
        showThought = false;
        thought = "";
        chatLog = [...chatLog, {
          sender: 'assistant',
          content: finalResponse,
          timestamp: new Date()
        }];
      }
    );
  }
</script>


<div class="hud-frame">
  <svg viewBox="0 0 100 100" preserveAspectRatio="none">
    <polyline points="2,8 2,2 8,2" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="92,2 98,2 98,8" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="2,92 2,98 8,98" stroke="#00ffee" stroke-width="0.6" fill="none" />
    <polyline points="92,98 98,98 98,92" stroke="#00ffee" stroke-width="0.6" fill="none" />
  </svg>
</div>

<div class="deepseek-wrapper">
  <div class="pill-label">DEEPSEEK MODE</div>

  <div class="chat-area">
    <ChatWindow {chatLog} />
    {#if showThought}
      <ThoughtBox content={thought} />
    {/if}
  </div>

  <div class="input-area">
    <InputBar onSubmit={handleUserInput} />
  </div>
</div>

<style>
  .hud-frame {
    position: fixed;
    top: 0;
    left: 0;
    width: 100vw;
    height: 100vh;
    z-index: 98;
    pointer-events: none;
    opacity: 0.23;
    filter: drop-shadow(0 0 6px #00ffee) blur(0.3px);
  }

  .hud-frame svg {
    width: 100%;
    height: 100%;
  }

  .deepseek-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    height: 100vh;
    padding: 2.5rem 1rem 1rem 1rem;
    gap: 1.5rem;
    box-sizing: border-box;
  }

  .pill-label {
    background: rgba(0, 255, 255, 0.1);
    border: 1px solid rgba(0, 255, 255, 0.3);
    border-radius: 9999px;
    padding: 0.6rem 1.8rem;
    color: #00ffee;
    font-size: 1.1rem;
    font-weight: bold;
    letter-spacing: 0.15em;
    text-shadow: 0 0 10px #00ffeeaa;
    box-shadow: 0 0 10px #00ffeeaa inset, 0 0 15px #00ffee99;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease-in-out;
    flex-shrink: 0;
  }

  .chat-area {
    width: 85%;
    max-width: 960px;
    flex: 1;
    min-height: 0;
    overflow-y: auto;
    background: rgba(0, 255, 255, 0.08);
    border: 1px solid rgba(0, 255, 255, 0.25);
    border-radius: 1rem;
    padding: 1.25rem;
    backdrop-filter: blur(20px);
    box-shadow: 0 0 35px #00ffee44, 0 0 20px #00ffee55 inset;
    position: relative;
  }

  .chat-area::-webkit-scrollbar {
    width: 8px;
  }

  .chat-area::-webkit-scrollbar-track {
    background: transparent;
  }

  .chat-area::-webkit-scrollbar-thumb {
    background: #00ffee44;
    border-radius: 4px;
  }

  .chat-area::-webkit-scrollbar-thumb:hover {
    background: #00ffee66;
  }

  .input-area {
    width: 100%;
    display: flex;
    justify-content: center;
    padding: 1rem;
    flex-shrink: 0;
  }

  @media (max-width: 768px) {
    .chat-area {
      width: 95%;
      padding: 1rem;
    }

    .pill-label {
      font-size: 1rem;
      padding: 0.5rem 1.5rem;
    }
  }
</style>


// src/lib/deepseek/InputBar.svelte

<!-- src/components/InputBar.svelte -->
<script lang="ts">
  export let onSubmit: (value: string) => void = () => {};

  let userInput = "";

  function handleSubmit() {
    if (userInput.trim()) {
      onSubmit(userInput);
      userInput = "";
    }
  }
</script>

<div class="input-container">
  <div class="input-bar-wrapper">
    <span class="prompt-symbol">&gt;</span>
    <input
      bind:value={userInput}
      type="text"
      class="input-bar"
      placeholder="Ask DeepSeek anything..."
      on:keydown={(e) => e.key === 'Enter' && handleSubmit()}
    />
  </div>
</div>

<style>
  .input-container {
    width: 85%;
    max-width: 960px;
    margin-top: auto;
    padding: 1rem;
    display: flex;
    justify-content: center;
    backdrop-filter: blur(15px);
  }

  .input-bar-wrapper {
    width: 100%;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    background: rgba(0, 255, 255, 0.07);
    border: 1px solid rgba(0, 255, 255, 0.4);
    border-radius: 9999px;
    padding: 0.65rem 1.2rem;
    box-shadow: 0 0 12px #00ffff55 inset, 0 0 6px #00ffee44;
  }

  .prompt-symbol {
    color: #00ffee;
    font-weight: bold;
    font-size: 1.2rem;
    text-shadow: 0 0 5px #00ffee99;
    font-family: 'JetBrains Mono', monospace;
  }

  .input-bar {
    flex: 1;
    background: transparent;
    border: none;
    outline: none;
    color: #ccffff;
    font-family: 'JetBrains Mono', monospace;
    font-size: 1rem;
  }

  .input-bar::placeholder {
    color: #88ccccaa;
  }
</style>


// src/lib/deepseek/ThoughtBox.svelte

<!-- src/components/ThoughtBox.svelte -->
<script lang="ts">
  export let content: string = "";
</script>

<div class="thought-float">
  <span class="typing-label">AI: <span class="typewriter">{content}</span></span>
</div>

<style>
  .thought-float {
    position: absolute;
    top: 5.5rem;
    left: 8%;
    max-width: 400px;
    font-family: 'JetBrains Mono', monospace;
    font-size: 0.95rem;
    color: #00ffee;
    background: rgba(0, 255, 255, 0.06);
    padding: 0.75rem 1.25rem;
    border-radius: 1rem;
    border: 1px solid rgba(0, 255, 255, 0.25);
    box-shadow: 0 0 12px #00ffee55, 0 0 8px #00ffee22 inset;
    backdrop-filter: blur(16px);
    white-space: pre-wrap;
    animation: fadeIn 0.3s ease-in;
    z-index: 900;
  }

  .typing-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  @keyframes fadeIn {
    from { opacity: 0; transform: translateY(-5px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>


// src/lib/ProjectSpace/ProjectSpacePortal.svelte

<script lang="ts">
    import { onMount } from 'svelte';
    import { writable } from 'svelte/store';
    import { Clock3 } from 'lucide-svelte';
    import { openProject,parseProject, loadFile, saveFile } from './api/FileAPI';
    import { openFiles, activeFile, fileContent, projectName, isLoading } from './stores/editorStore';
    import { moduleGraph } from './stores/graphStore';
    import ArchitectureView from './ArchitectureView.svelte';
    import AIAssistant from './AIAssistant.svelte';
    import CodeEditor from './CodeEditor.svelte';
    import CodePromptBox from './CodePromptBox.svelte';
    import SimulationPanel from './SimulationPanel.svelte';
    
    export const designHierarchy = writable(null);

    const time = writable('00:00:00');
    let editorRef: CodeEditor;
    let aiAssistantRef: AIAssistant;
  
    // FIXED: Callback function for AI responses (Svelte 5 style)
    function handleAIResponse(data: {prompt: string, response: string, file: string, source: string}) {
      console.log('[MAIN] AI Response received:', data);
      aiAssistantRef?.addResponse(data.prompt, data.response, data.file, data.source || 'ai');
    }
  
    function getFileName(fullPath: string): string {
      return fullPath.split(/[/\\]/).pop() || fullPath;
    }
  
    function formatTime(seconds: number): string {
      const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
      const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
      const s = (seconds % 60).toString().padStart(2, '0');
      return `${h}:${m}:${s}`;
    }
  
    onMount(() => {
      let seconds = 0;
      const interval = setInterval(() => {
        seconds += 1;
        time.set(formatTime(seconds));
      }, 1000);
      return () => clearInterval(interval);
    });
  
    async function handleOpenProject() {
      if ($isLoading) return;
      
      const path = prompt('Enter the FULL path to your project folder:');
      if (!path) return;
  
      isLoading.set(true);
      fileContent.set('// Opening project...');
      
      try {
        const files = await openProject(path);
        
        if (files.length === 0) {
          alert('No Verilog files (.v, .sv, .vh) found in that folder.');
          fileContent.set('// No Verilog files found. Try opening another folder.');
          openFiles.set([]);
          activeFile.set(null);
          return;
        }
        
        
        openFiles.set(files);
        projectName.set(getFileName(path));
        
        const graph = await parseProject(files);
        moduleGraph.set(Object.fromEntries(graph.map(m => [m.module, m])));

        // Load the first file automatically
        await handleFileClick(files[0]);
        
      } catch (err) {
        console.error('[FRONTEND] Error opening project:', err);
        alert(`❌ Failed to open project.\n\nError: ${err.message}`);
        fileContent.set(`// Error opening project. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  
    async function handleFileClick(filePath: string) {
      if ($isLoading) return;
      
      isLoading.set(true);
      activeFile.set(filePath);
      fileContent.set(`// Loading ${getFileName(filePath)}...`);
  
      try {
        const content = await loadFile(filePath);
        fileContent.set(content);
      } catch (err) {
        console.error(`[FRONTEND] Error loading file:`, err);
        alert(`❌ Failed to load file: ${getFileName(filePath)}\n\nError: ${err.message}`);
        fileContent.set(`// Error loading file. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  
    async function handleSave() {
      if (!$activeFile || $isLoading) return;
      
      // Get current editor content
      const currentContent = editorRef?.getEditorValue() || $fileContent;
      
      try {
        await saveFile($activeFile, currentContent);
        alert('✅ File saved successfully!');
      } catch (err) {
        alert('❌ Failed to save file: ' + err.message);
      }
    }
  </script>
  
  <div class="pspace-container">
    <div class="design-toolbar">
      <div class="left-group">
        <span class="project-name">{$projectName}</span>
        <div class="tabs" role="tablist">
          {#each $openFiles as file (file)}
            <button
              class="tab"
              class:active={file === $activeFile}
              type="button"
              onclick={() => handleFileClick(file)}
              disabled={$isLoading}
            >
              {getFileName(file)}
            </button>
          {/each}
        </div>
      </div>
  
      <div class="right-group">
        <button class="glow-btn" onclick={handleOpenProject} disabled={$isLoading} type="button" aria-label="Open Project Folder">
          {#if $isLoading}⏳{:else}📂{/if}
        </button>
        <button class="glow-btn" onclick={handleSave} disabled={$isLoading || !$activeFile} type="button" aria-label="Save File">
          💾
        </button>
        <Clock3 class="clock-icon" />
        <span class="timer">{$time}</span>
      </div>
    </div>
  
    <div class="pspace-main">
      <div class="left-column">
        <ArchitectureView />
        <AIAssistant bind:this={aiAssistantRef} />
      </div>
      <div class="center-column">
        <CodeEditor bind:this={editorRef} />
        <!-- FIXED: Pass callback prop instead of using event dispatcher -->
        <CodePromptBox onAiResponse={handleAIResponse} />
      </div>
      <div class="right-column">
        <SimulationPanel />
      </div>
    </div>
  </div>
  
  <style>
    .pspace-container {
      width: 100vw;
      height: 100vh;
      display: flex;
      flex-direction: column;
      background-color: #0d1117;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      overflow: hidden;
    }
    .design-toolbar {
      width: 100%;
      height: 60px;
      background: linear-gradient(to right, #0f172a, #1a2332);
      border-bottom: 1px solid #00ffee55;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1rem;
      color: #00ffee;
      box-sizing: border-box;
    }
    .left-group { display: flex; align-items: center; gap: 1rem; }
    .project-name { font-size: 14px; font-weight: bold; }
    .tabs { display: flex; gap: 0.25rem; align-items: center; }
    .tab {
      background: #1e293b;
      padding: 0.25rem 0.75rem;
      border-radius: 4px;
      color: #00ffeeaa;
      font-family: monospace;
      cursor: pointer;
      transition: background 0.2s;
      font-size: 13px;
      border: none;
      border-bottom: 2px solid transparent;
    }
    .tab:disabled { cursor: not-allowed; opacity: 0.6; }
    .tab.active { background: #00ffee22; color: #00ffee; border-bottom: 2px solid #00ffee; }
    .right-group { display: flex; align-items: center; gap: 0.75rem; }
    .glow-btn {
      background: transparent;
      border: 1px solid #00ffee44;
      color: #00ffee;
      padding: 0.2rem 0.6rem;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 0 6px #00ffee55;
      transition: background 0.2s;
    }
    .glow-btn:hover { background: #00ffee22; }
    .glow-btn:disabled { cursor: not-allowed; opacity: 0.6; box-shadow: none; }
    .clock-icon { width: 18px; height: 18px; stroke: #00ffee; }
    .timer { font-weight: bold; font-size: 15px; }
    .pspace-main {
      flex: 1;
      display: flex;
      flex-direction: row;
      gap: 1rem;
      padding: 1rem;
    }
    .left-column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      min-width: 250px;
    }
    .center-column {
      flex: 2;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      min-width: 0;
    }
    .right-column {
      flex: 1;
      display: flex;
      flex-direction: column;
      gap: 1rem;
      min-width: 250px;
    }
  </style>
  


// src/lib/ProjectSpace/AIAssistant.svelte

<script lang="ts">
    let aiResponses: Array<{prompt: string, response: string, file: string, timestamp: Date, source: string}> = [];
  
    export function addResponse(prompt: string, response: string, file: string, source: string = 'ai') {
      aiResponses = [...aiResponses, { prompt, response, file, timestamp: new Date(), source }];
    }
  
    function formatResponse(text: string): string {
      // Basic markdown-like formatting for citations
      return text
        .replace(/\[(\d+)\]/g, '<sup class="citation">[$1]</sup>')
        .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        .replace(/\*(.*?)\*/g, '<em>$1</em>');
    }
  </script>
  
  <div class="ai-assistant">
    <h2>🤖 Co-Strategist</h2>
    <div class="ai-output">
      {#if aiResponses.length === 0}
        <div class="default-tips">
          <p><strong>💡 Tip:</strong> Add hazard detection logic to the decode stage.</p>
          <p><strong>🔍 Insight:</strong> Your memory controller can benefit from burst access alignment.</p>
          <p><strong>⚡ Ready:</strong> Ask Perplexity about your Verilog code for real-time insights!</p>
        </div>
      {:else}
        {#each aiResponses.slice(-3) as response}
          <div class="response-item" class:error={response.source === 'error'}>
            <div class="response-header">
              <div class="question">
                <strong>Q:</strong> {response.prompt}
              </div>
              <div class="meta">
                <span class="file-tag">{response.file}</span>
                <span class="source-tag" class:perplexity={response.source === 'perplexity'}>
                  {response.source === 'perplexity' ? '⚡ Perplexity' : response.source}
                </span>
              </div>
            </div>
            <div class="response-content">
              <strong>A:</strong> {@html formatResponse(response.response)}
            </div>
            <div class="timestamp">
              {response.timestamp.toLocaleTimeString()}
            </div>
          </div>
        {/each}
      {/if}
    </div>
  </div>
  
  <style>
    .ai-assistant {
      background: #0f172a;
      border: 1px solid #00ffee33;
      padding: 1rem;
      border-radius: 10px;
      flex-grow: 1;
      resize: vertical;
      overflow: auto;
      min-height: 150px;
    }
  
    .ai-assistant h2 {
      margin-top: 0;
      font-size: 16px;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      text-align: center;
    }
  
    .ai-output {
      margin-top: 1rem;
      font-size: 13px;
      line-height: 1.6;
      color: #c0ffee;
      font-family: monospace;
    }
  
    .default-tips p {
      margin-bottom: 0.75rem;
      padding: 0.5rem;
      background: #1e293b;
      border-radius: 6px;
      border-left: 3px solid #00ffee;
    }
  
    .response-item {
      margin-bottom: 1rem;
      padding: 0.75rem;
      background: #1e293b;
      border-radius: 6px;
      border-left: 3px solid #9333ea;
    }
  
    .response-item.error {
      border-left-color: #ef4444;
      background: #1e1b1b;
    }
  
    .response-header {
      display: flex;
      justify-content: space-between;
      align-items: flex-start;
      margin-bottom: 0.5rem;
      font-size: 12px;
      gap: 0.5rem;
    }
  
    .question {
      flex-grow: 1;
    }
  
    .meta {
      display: flex;
      gap: 0.25rem;
      flex-shrink: 0;
    }
  
    .file-tag {
      background: #00ffee22;
      color: #00ffee;
      padding: 0.1rem 0.3rem;
      border-radius: 3px;
      font-size: 10px;
    }
  
    .source-tag {
      background: #374151;
      color: #9ca3af;
      padding: 0.1rem 0.3rem;
      border-radius: 3px;
      font-size: 10px;
    }
  
    .source-tag.perplexity {
      background: #9333ea22;
      color: #9333ea;
    }
  
    .response-content {
      white-space: pre-wrap;
      margin-bottom: 0.5rem;
    }
  
    .response-content :global(.citation) {
      color: #9333ea;
      font-size: 10px;
    }
  
    .timestamp {
      font-size: 10px;
      color: #6b7280;
      text-align: right;
    }
  </style>
  


// src/lib/ProjectSpace/ArchitectureView.svelte

<script lang="ts">
    // Placeholder for interactive architecture view
    // This will later connect to design.json and support clickable blocks
  </script>
  
  <div class="architecture-view" contenteditable="false">
    <h2>🔧 Architecture Map</h2>
    <div class="arch-grid">
      <div class="block">FETCH</div>
      <div class="block">DECODE</div>
      <div class="block">EXECUTE</div>
      <div class="block">MEMORY</div>
      <div class="block">WB</div>
    </div>
  </div>
  
  <style>
    .architecture-view {
      background: #0f172a;
      border: 1px solid #00ffee33;
      padding: 1rem;
      border-radius: 10px;
      flex-grow: 1;
      resize: vertical;
      overflow: auto;
      min-height: 150px;
    }
  
    .architecture-view h2 {
      margin-top: 0;
      font-size: 16px;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      text-align: center;
    }
  
    .arch-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(90px, 1fr));
      gap: 0.75rem;
      padding-top: 1rem;
    }
  
    .block {
      background: #1e293b;
      border: 1px solid #00ffee55;
      color: #00ffee;
      padding: 0.75rem;
      text-align: center;
      border-radius: 6px;
      font-size: 13px;
      font-weight: bold;
      cursor: pointer;
      transition: background 0.2s ease;
    }
  
    .block:hover {
      background: #334155;
    }
  </style>
  


// src/lib/ProjectSpace/CodeEditor.svelte

<script lang="ts">
    import { onMount } from 'svelte';
    import * as monaco from 'monaco-editor';
    import { fileContent } from './stores/editorStore';
  
    let editorContainer: HTMLDivElement;
    let editorInstance: monaco.editor.IStandaloneCodeEditor;
  
    // Sync editor content with store
    $: if (editorInstance && $fileContent !== undefined) {
      const current = editorInstance.getValue();
      if ($fileContent !== current) {
        editorInstance.setValue($fileContent);
      }
    }
  
    // Export function to get current editor value
    export function getEditorValue(): string {
      return editorInstance?.getValue?.() || '';
    }
  
    onMount(() => {
      monaco.editor.defineTheme('hud-terminal-neon', {
        base: 'vs-dark',
        inherit: true,
        rules: [
          { token: '', foreground: '00ffee' },
          { token: 'keyword', foreground: 'f92672', fontStyle: 'bold' },
          { token: 'comment', foreground: '5d6d7e', fontStyle: 'italic' },
          { token: 'string', foreground: '00ff7f' },
          { token: 'number', foreground: 'ffdd00' }
        ],
        colors: {
          'editor.background': '#0d1117',
          'editor.foreground': '#00ffee',
          'editorLineNumber.foreground': '#00ffee88',
          'editorCursor.foreground': '#00ffee',
          'editorLineHighlightBackground': '#00ffee11',
          'scrollbarSlider.background': '#00ffee33',
          'scrollbarSlider.hoverBackground': '#00ffee55',
          'scrollbarSlider.activeBackground': '#00ffee88'
        }
      });
  
      editorInstance = monaco.editor.create(editorContainer, {
        value: $fileContent,
        language: 'verilog',
        theme: 'hud-terminal-neon',
        fontSize: 14,
        minimap: { enabled: false },
        automaticLayout: true,
        scrollbar: {
          verticalScrollbarSize: 6,
          horizontalScrollbarSize: 6,
          useShadows: false,
        }
      });
  
      // Update store when user types
      editorInstance.onDidChangeModelContent(() => {
        fileContent.set(editorInstance.getValue());
      });
  
      return () => editorInstance?.dispose();
    });
  </script>
  
  <div class="editor-wrapper">
    <div class="code-editor" bind:this={editorContainer}></div>
  </div>
  
  <style>
    .editor-wrapper {
      flex-grow: 1;
      display: flex;
      flex-direction: column;
      min-height: 0;
      overflow: hidden;
      margin-bottom: 1rem;
    }
  
    .code-editor {
      width: 100%;
      height: 100%;
      background: #0d1117;
      border: 1px solid #00ffee33;
      border-radius: 10px;
      overflow: hidden;
      box-sizing: border-box;
    }
  </style>
  


// src/lib/ProjectSpace/DesignFileBar.svelte

<script lang="ts">
    import { onMount } from 'svelte';
    import { writable } from 'svelte/store';
    import { Clock3 } from 'lucide-svelte';
  
    const time = writable('00:00:00');
  
    function formatTime(seconds: number): string {
      const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
      const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
      const s = (seconds % 60).toString().padStart(2, '0');
      return `${h}:${m}:${s}`;
    }
  
    onMount(() => {
      let seconds = 0;
      const interval = setInterval(() => {
        seconds += 1;
        time.set(formatTime(seconds));
      }, 1000);
      return () => clearInterval(interval);
    });
  </script>
  
  <div class="design-bar">
    <div class="title">PROJECT SPACE</div>
    <div class="timer-group">
      <Clock3 class="clock-icon" />
      <span class="timer">{$time}</span>
    </div>
  </div>
  
  <style>
    .design-bar {
      width: 100%;
      height: 60px;
      background: #111827;
      border-bottom: 1px solid #00ffee44;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1rem;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      font-size: 14px;
      letter-spacing: 1px;
      box-sizing: border-box;
    }
  
    .title {
      font-size: 18px;
      font-weight: bold;
    }
  
    .timer-group {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      white-space: nowrap;
    }
  
    .clock-icon {
      width: 20px;
      height: 20px;
      stroke: #00ffee;
    }
  
    .timer {
      font-weight: bold;
      font-size: 16px;
    }
  </style>
  


// src/lib/ProjectSpace/CodePromptBox.svelte

<script lang="ts">
    import { analyzeVerilogWithPerplexity } from './api/PerplexityAPI';
    import { fileContent, activeFile } from './stores/editorStore';
  
    // Instead of createEventDispatcher, use callback props
    export let onAiResponse: (data: {prompt: string, response: string, file: string, source: string}) => void = () => {};
  
    let userInput = '';
    let isLoading = false;
  
    async function submitPrompt() {
      const trimmed = userInput.trim();
      if (trimmed.length === 0 || isLoading) return;
  
      isLoading = true;
      
      try {
        const currentCode = $fileContent || '// No code loaded';
        const fileName = $activeFile ? $activeFile.split(/[/\\]/).pop() : 'unknown';
        
        console.log('[PERPLEXITY] Analyzing code with prompt:', trimmed);
        
        const aiResponse = await analyzeVerilogWithPerplexity(currentCode, trimmed);
        
        // Call the callback prop instead of dispatching
        onAiResponse({ 
          prompt: trimmed,
          response: aiResponse,
          file: fileName,
          source: 'perplexity'
        });
        
        userInput = '';
      } catch (error) {
        console.error('[PERPLEXITY] Error:', error);
        onAiResponse({ 
          prompt: trimmed,
          response: `❌ Perplexity Error: ${error.message}`,
          file: 'error',
          source: 'error'
        });
      } finally {
        isLoading = false;
      }
    }
  </script>
  
  <div class="code-prompt-box">
    <div class="prompt-wrapper" class:loading={isLoading}>
      <span class="prompt-arrow">&gt;</span>
      <input
        class="prompt-input"
        type="text"
        placeholder={isLoading ? "🔍 Searching latest Verilog practices..." : "Talk to Perplexity... (e.g., optimize this floating-point unit)"}
        bind:value={userInput}
        disabled={isLoading}
        onkeydown={(e) => e.key === 'Enter' && submitPrompt()}
      />
      {#if isLoading}
        <span class="loading-indicator">🔍</span>
      {:else}
        <span class="perplexity-badge">⚡</span>
      {/if}
    </div>
  </div>
  
  
<style>
  .code-prompt-box {
    width: 100%;
    margin-top: 0rem;
    margin-bottom: 0.5rem;
    background: transparent;
    display: flex;
    justify-content: center;
    align-items: center;
    box-sizing: border-box;
  }

  .prompt-wrapper {
    width: 100%;
    display: flex;
    align-items: center;
    background: #0f172a;
    border: 1px solid #00ffee66;
    border-radius: 9999px;
    padding: 0.1rem 1rem;
    gap: 0.75rem;
    box-shadow: 0 0 8px #00ffee44;
    transition: all 0.3s;
  }

  .prompt-wrapper.loading {
    border-color: #9333ea;
    box-shadow: 0 0 12px #9333ea44;
  }

  .prompt-arrow {
    font-family: monospace;
    font-size: 1rem;
    color: #00ffeecc;
  }

  .prompt-input {
    flex-grow: 1;
    background: transparent;
    border: none;
    color: #00ffee;
    font-family: 'Orbitron', monospace;
    font-size: 14px;
    outline: none;
    padding: 0.25rem 0;
  }

  .prompt-input:disabled {
    opacity: 0.7;
  }

  .loading-indicator {
    font-size: 16px;
    animation: pulse 1s infinite;
  }

  .perplexity-badge {
    font-size: 14px;
    color: #9333ea;
  }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
</style>



// src/lib/ProjectSpace/SimulationPanel.svelte

<script lang="ts">
    // Placeholder for waveform or state probe output
  </script>
  
  <div class="simulation-panel">
    <h2>📈 Simulation Output</h2>
    <div class="sim-frame">
      <p>Waveform output will be displayed here (Verilator JSON or VCD viewer).</p>
    </div>
  </div>
  
  <style>
    .simulation-panel {
      background: #0f172a;
      border: 1px solid #00ffee33;
      padding: 1rem;
      border-radius: 10px;
      height: 100%;
      display: flex;
      flex-direction: column;
      resize: vertical;
      overflow: auto;
      min-height: 200px;
    }
  
    .simulation-panel h2 {
      font-size: 16px;
      font-family: 'Orbitron', monospace;
      color: #00ffee;
      text-align: center;
      margin-top: 0;
    }
  
    .sim-frame {
      flex-grow: 1;
      background: #1e293b;
      border: 1px solid #00ffee55;
      color: #00ffee;
      padding: 1rem;
      border-radius: 6px;
      font-size: 13px;
      font-family: monospace;
    }
  </style>
  


// src/lib/ProjectSpace/TabSwitcher.svelte




// src/lib/ProjectSpace/TopToolbar.svelte

<script lang="ts">
    import { onMount } from 'svelte';
    import { writable } from 'svelte/store';
    import { Clock3 } from 'lucide-svelte';
    import { openProject, loadFile } from './api/FileAPI'; // Adjust path if needed
    import { openFiles, activeFile, fileContent, isLoading, projectName } from './stores/editorStore';

    
    const time = writable('00:00:00');
  
    // --- Helper to get just the filename from a full path ---
    function getFileName(fullPath: string): string {
      return fullPath.split(/[/\\]/).pop() || fullPath;
    }
    
    onMount(() => {
      let seconds = 0;
      const interval = setInterval(() => {
        seconds++;
        const h = Math.floor(seconds / 3600).toString().padStart(2, '0');
        const m = Math.floor((seconds % 3600) / 60).toString().padStart(2, '0');
        const s = (seconds % 60).toString().padStart(2, '0');
        time.set(`${h}:${m}:${s}`);
      }, 1000);
      return () => clearInterval(interval);
    });
  
    // --- Core Logic ---
    async function handleOpenProject() {
      console.log('[FRONTEND] Open Project button clicked.');
      if ($isLoading) return; // Prevent multiple clicks
     
      const path = prompt('Enter the FULL path to your project folder:');
      if (!path) {
        console.log('[FRONTEND] User cancelled prompt.');
        return;
      }
  
      isLoading.set(true);
      fileContent.set('// Opening project...');
      try {
        const files = await openProject(path);
        
        if (files.length === 0) {
          alert('No Verilog files (.v, .sv, .vh) found in that folder.');
          fileContent.set('// No Verilog files found. Try opening another folder.');
          openFiles.set([]);
          activeFile.set(null);
          return;
        }
        
        openFiles.set(files);
        projectName.set(getFileName(path));
  
        // Load the first file automatically
        await handleFileClick(files[0]);
  
      } catch (err) {
        console.error('[FRONTEND] Error opening project:', err);
        alert(`❌ Failed to open project.\n\nError: ${err.message}\n\nCheck the browser console (F12) and the backend terminal for more details.`);
        fileContent.set(`// Error opening project. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  
    async function handleFileClick(filePath: string) {
      if ($isLoading) return;
      console.log(`[FRONTEND] Tab clicked for: ${filePath}`);
      
      isLoading.set(true);
      activeFile.set(filePath);
      fileContent.set(`// Loading ${getFileName(filePath)}...`);
  
      try {
        const content = await loadFile(filePath);
        fileContent.set(content);
      } catch (err) {
        console.error(`[FRONTEND] Error loading file:`, err);
        alert(`❌ Failed to load file: ${getFileName(filePath)}.\n\nError: ${err.message}`);
        fileContent.set(`// Error loading file. ${err.message}`);
      } finally {
        isLoading.set(false);
      }
    }
  </script>
  
  <div class="design-toolbar">
    <div class="left-group">
      <span class="project-name">{$projectName}</span>
      <div class="tabs" role="tablist">
        {#each $openFiles as file (file)}
          <button
            class="tab"
            class:active={file === $activeFile}
            type="button"
            on:click={() => handleFileClick(file)}
            disabled={$isLoading}
          >
            {getFileName(file)}
          </button>
        {/each}
      </div>
    </div>
  
    <div class="right-group">
      <button class="glow-btn" on:click={handleOpenProject} disabled={$isLoading} type="button" aria-label="Open Project Folder">
        {#if $isLoading}⏳{:else}📂{/if}
      </button>
      <Clock3 class="clock-icon" />
      <span class="timer">{$time}</span>
    </div>
  </div>
  
  <style>
    /* Your styles are good. I've added a z-index to the button just in case. */
    .design-toolbar { width: 100%; height: 60px; background: linear-gradient(to right, #0f172a, #1a2332); border-bottom: 1px solid #00ffee55; display: flex; justify-content: space-between; align-items: center; padding: 0 1rem; color: #00ffee; font-family: 'Orbitron', monospace; box-sizing: border-box; }
    .left-group { display: flex; align-items: center; gap: 1rem; }
    .project-name { font-size: 14px; font-weight: bold; }
    .tabs { display: flex; gap: 0.25rem; align-items: center; }
    .tab { background: #1e293b; padding: 0.25rem 0.75rem; border-radius: 4px; color: #00ffeeaa; font-family: monospace; cursor: pointer; transition: background 0.2s; font-size: 13px; border: none; border-bottom: 2px solid transparent; }
    .tab:disabled { cursor: not-allowed; opacity: 0.6; }
    .tab.active { background: #00ffee22; color: #00ffee; border-bottom: 2px solid #00ffee; }
    .right-group { display: flex; align-items: center; gap: 0.75rem; }
    .glow-btn { background: transparent; border: 1px solid #00ffee44; color: #00ffee; padding: 0.2rem 0.6rem; border-radius: 6px; font-size: 16px; cursor: pointer; box-shadow: 0 0 6px #00ffee55; transition: background 0.2s; /* Add these two lines to prevent click issues */ position: relative; z-index: 99; }
    .glow-btn:hover { background: #00ffee22; }
    .glow-btn:disabled { cursor: not-allowed; opacity: 0.6; box-shadow: none; }
    .clock-icon { width: 18px; height: 18px; stroke: #00ffee; }
    .timer { font-weight: bold; font-size: 15px; }

    /* Your existing styles are fine, no changes needed here. */
    .design-toolbar {
      width: 100%;
      height: 60px;
      background: linear-gradient(to right, #0f172a, #1a2332);
      border-bottom: 1px solid #00ffee55;
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0 1rem;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      box-sizing: border-box;
    }
    .left-group { display: flex; align-items: center; gap: 1rem; }
    .project-name { font-size: 14px; font-weight: bold; }
    .tabs { display: flex; gap: 0.25rem; align-items: center; }
    .tab {
      background: #1e293b;
      padding: 0.25rem 0.75rem;
      border-radius: 4px;
      color: #00ffeeaa;
      font-family: monospace;
      cursor: pointer;
      transition: background 0.2s;
      font-size: 13px;
      border: none;
      border-bottom: 2px solid transparent;
    }
    .tab.active { background: #00ffee22; color: #00ffee; border-bottom: 2px solid #00ffee; }
    .tab.new { background: #0d1117; border: 1px dashed #00ffee88; color: #00ffeecc; font-weight: bold; }
    .right-group { display: flex; align-items: center; gap: 0.75rem; }
    .glow-btn {
      background: transparent;
      border: 1px solid #00ffee44;
      color: #00ffee;
      padding: 0.2rem 0.6rem;
      border-radius: 6px;
      font-size: 16px;
      cursor: pointer;
      box-shadow: 0 0 6px #00ffee55;
      transition: background 0.2s;
    }
    .glow-btn:hover { background: #00ffee22; }
    .clock-icon { width: 18px; height: 18px; stroke: #00ffee; }
    .timer { font-weight: bold; font-size: 15px; }
  </style>
  



// src/lib/ProjectSpace/api/FileAPI.ts

// src/lib/ProjectSpace/api/FileAPI.ts
const API_BASE = import.meta.env.VITE_API_BASE ?? 'http://localhost:3001';

/* ---------- OPEN PROJECT ---------- */
export async function openProject(folderPath: string): Promise<string[]> {
  const res = await fetch(`${API_BASE}/api/open`, {          // << path fixed
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ path: folderPath })
  });
  if (!res.ok) throw new Error(await res.text());
  return (await res.json()).files;
}

/* ---------- LOAD / SAVE (paths unchanged) ---------- */
export async function loadFile(filename: string): Promise<string> {
  const res = await fetch(`${API_BASE}/api/load`, {          // << path fixed
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ filename })
  });
  if (!res.ok) throw new Error(await res.text());
  return (await res.json()).content;
}

export async function saveFile(filename: string, content: string) {
  const res = await fetch(`${API_BASE}/api/save`, {          // << path fixed
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ filename, content })
  });
  if (!res.ok) throw new Error(await res.text());
}

/* ---------- PARSE PROJECT ---------- */
export async function parseProject(files: string[]) {
  const res = await fetch(`${API_BASE}/api/parse-project`, {
    method:'POST',
    headers:{'Content-Type':'application/json'},
    body: JSON.stringify({ files })
  });
  if (!res.ok) throw new Error(await res.text());
  return (await res.json()).graph;
}



// src/lib/ProjectSpace/api/PerplexityAPI.ts

const PERPLEXITY_API_KEY = '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'; // Get from perplexity.ai settings
const PERPLEXITY_BASE_URL = 'https://api.perplexity.ai';

export interface PerplexityMessage {
  role: 'system' | 'user' | 'assistant';
  content: string;
}

export async function callPerplexity(messages: PerplexityMessage[]): Promise<string> {
  console.log('[PERPLEXITY] Sending request...');
  
  try {
    const response = await fetch(`${PERPLEXITY_BASE_URL}/chat/completions`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${PERPLEXITY_API_KEY}`
      },
      body: JSON.stringify({
        model: 'sonar-pro', // Best model with web search + citations
        messages,
        max_tokens: 500,
        temperature: 0.7,
        frequency_penalty: 1
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      throw new Error(`Perplexity API Error: ${errorData.error?.message || response.statusText}`);
    }

    const data = await response.json();
    console.log('[PERPLEXITY] Response received, usage:', data.usage);
    
    return data.choices[0].message.content;
  } catch (error) {
    console.error('[PERPLEXITY] Error:', error);
    throw error;
  }
}

export async function analyzeVerilogWithPerplexity(code: string, userPrompt: string): Promise<string> {
  const messages: PerplexityMessage[] = [
    {
      role: 'system',
      content: `You are an expert Verilog/SystemVerilog hardware design assistant. Analyze code, suggest optimizations, find bugs, and provide hardware design insights. Use real-time web search to find the latest best practices and cite your sources. Keep responses practical and actionable.`
    },
    {
      role: 'user',
      content: `Here's my Verilog code:\n\n\`\`\`verilog\n${code}\n\`\`\`\n\nUser request: ${userPrompt}\n\nPlease analyze this code and provide insights with citations to current best practices.`
    }
  ];

  return await callPerplexity(messages);
}



// src/lib/ProjectSpace/api/SimAPI.ts




// src/lib/ProjectSpace/backend/fetchFiles.ts




// src/lib/ProjectSpace/backend/saveFile.ts




// src/lib/ProjectSpace/logs/ProjectLog.ts




// src/lib/ProjectSpace/sim/SimulationManager.ts




// src/lib/ProjectSpace/stores/editorStore.ts

import { writable } from 'svelte/store';

export const openFiles = writable<string[]>([]);
export const activeFile = writable<string | null>(null);
export const fileContent = writable<string>('// No file open. Click 📂 to open a project.');
export const projectName = writable('GPU');
export const isLoading = writable(false);



// src/lib/ProjectSpace/utils/fileHelpers.ts




// src/lib/ProjectSpace/utils/simHelpers.ts




// src/lib/widgets/WelcomePortal.svelte

<script lang="ts">
  import { sendToPerplexity } from '../ai/perplexity';
  import ResponseLeaf from './ResponseLeaf.svelte';
  import { welcomeText, appMode } from '../store';
  import { routeCommand } from '../CommandRouter'; // <-- import this

  let userInput = "";
  let aiMessage = "";
  let showResponse = false;

 
async function handleKeydown(event: KeyboardEvent) {
  if (event.key === 'Enter' && userInput.trim()) {
    const trimmed = userInput.trim().toLowerCase();
    if (trimmed === 'practiceq') {
      appMode.set('practiceq');
      userInput = '';
      return;
    }
    if (trimmed === 'mindmap') {
      appMode.set('mindmap');
      userInput = '';
      return;
    }

    showResponse = true;
    aiMessage = "Processing...";

    try {
      const response = await routeCommand(userInput); // <-- use this instead of sendToPerplexity
      aiMessage = response;
    } catch (err) {
      aiMessage = "Error: " + err.message;
    }

    userInput = "";
  }
}

</script>


<div class="welcome-portal">
  <div class="portal-core">
    <h1 class="welcome-heading">{$welcomeText}</h1>
    <p class="mission-subtext">"The day is yours. Build, reflect, evolve."</p>

    <!-- Embedded Input Instead of CommandBox -->
    <div class="command-slot">
      <input
        type="text"
        bind:value={userInput}
        on:keydown={handleKeydown}
        placeholder="> Ask anything..."
        class="terminal-input"
      />
    </div>

    <div class="status-indicators">
      <span>🧠 GPU Project: Active</span>
      <span>🔥 Streak: 3d</span>
    </div>
  </div>
</div>

{#if showResponse}
  <ResponseLeaf message={aiMessage} onClose={() => showResponse = false} />
{/if}

<style>
  .welcome-portal {
    display: flex;
    justify-content: center;
    width: 100%;
    padding-top: 2.5rem;
    z-index: 10;
  }

  .portal-core {
    padding: 2rem 2rem 1.5rem;
    max-width: 420px;
    background: rgba(0, 255, 238, 0.03);
    border: 1px solid #00ffee33;
    clip-path: polygon(12px 0%, calc(100% - 12px) 0%, 100% 12px, 100% calc(100% - 12px), calc(100% - 12px) 100%, 12px 100%, 0% calc(100% - 12px), 0% 12px);
    box-shadow: 0 0 18px #00ffee44, 0 0 30px #00ffee22 inset;
    backdrop-filter: blur(4px) saturate(140%);
    color: #00ffee;
    font-family: 'Orbitron', monospace;
    text-align: center;
  }

  .welcome-heading {
    font-size: 1.7rem;
    margin-bottom: 0.7rem;
    color: #00ffee;
    letter-spacing: 0.07em;
  }

  .mission-subtext {
    font-size: 1.05rem;
    color: #bffcff;
    opacity: 0.8;
    margin-bottom: 1.6rem;
  }

  .command-slot {
    display: flex;
    justify-content: left;
    align-items: center;
    width: 100%;
    padding: 0.7rem 1.0rem;
    margin-bottom: 1.8rem;
  }

  .terminal-input {
    background: transparent;
    color: #00ffee;
    border: none;
    border-bottom: 1px solid #00ffee66;
    font-family: 'Orbitron', monospace;
    font-size: 1rem;
    width: 100%;
    outline: none;
  }

  .status-indicators {
    display: flex;
    justify-content: center;
    gap: 2rem;
    font-size: 0.95rem;
    color: #00ffeebb;
    opacity: 0.8;
  }
</style>



// src/lib/widgets/BottomWidget.svelte

<!-- src/lib/widgets/BottomWidget.svelte -->

<script lang="ts">
  import { lastJournal, lastSleep, lastActivity } from '../store';
</script>

  
<div class="bottom-widget">
  <div class="widget-box">📝 Journal: {$lastJournal}</div>
  <div class="widget-box">😴 Sleep: {$lastSleep}</div>
  <div class="widget-box">🧠 Last Activity: {$lastActivity}</div>
</div>

<style>
  .bottom-widget {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-top: 2rem;
    flex-wrap: wrap;
  }

  .widget-box {
    padding: 0.75rem 1.25rem;
    background: rgba(0, 255, 238, 0.05);
    border: 1px solid #00ffee88;
    border-radius: 0.5rem;
    color: #00ffee;
    font-family: 'Orbitron', monospace;
    font-size: 1.1rem;
    box-shadow: 0 0 6px #00ffee66;
    backdrop-filter: blur(3px);
    min-width: 220px;
    text-align: center;
  }
</style>



// src/lib/widgets/CommandBox.svelte

<script lang="ts">
  import { routeCommand } from '../CommandRouter';
  import ResponseLeaf from './ResponseLeaf.svelte';

  let userInput = "";
  let aiMessage = "";
  let showResponse = false;


  import { handleAsk } from '../CommandRouter';

async function handleKeydown(event: KeyboardEvent) {
  if (event.key === 'Enter' && userInput.trim()) {
    aiMessage = "Processing...";
    try {
      aiMessage = await handleAsk(userInput);
    } catch (err) {
      aiMessage = "Error: " + err.message;
    }
    userInput = "";
  }
}

</script>

<div class="command-box">
  <input
    bind:value={userInput}
    on:keydown={handleKeydown}
    class="input-terminal"
    placeholder="Enter command... (log, plan, ask, etc.)"
  />

  {#if showResponse}
    <ResponseLeaf message={aiMessage} onClose={() => (showResponse = false)} />
  {/if}
</div>

<style>
  .command-box {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .input-terminal {
    width: 100%;
    padding: 0.8rem 1.2rem;
    font-family: 'Fira Code', monospace;
    background: rgba(0, 255, 255, 0.05);
    border: 1px solid rgba(0, 255, 255, 0.4);
    border-radius: 0.5rem;
    color: white;
    font-size: 1rem;
    outline: none;
  }

  .input-terminal::placeholder {
    color: rgba(255, 255, 255, 0.4);
  }
</style>



// src/lib/widgets/FloatingStream.svelte

<script lang="ts">
    import { onMount } from 'svelte';
    import { memoryData } from '../memoryStore';
  
    let visibleItems: { text: string; id: number }[] = [];
    let idCounter = 0;
  
    function pickRandomMemory(): string {
     return "💬 TEST — Floating works!";
   }

    function pickRandomMemoryw(): string {
      const all = [
        ...memoryData.logs.map(e => e.content),
        ...memoryData.todayTasks,
        ...memoryData.focusItems
      ];
  
      if (all.length === 0) {
        console.warn("⚠️ No memory to float.");
        return "🧠 No memory data yet. Start logging.";
      }
  
      return all[Math.floor(Math.random() * all.length)];
    }
  
    function addFloatingItem() {
      const text = pickRandomMemory();
      const id = idCounter++;
      visibleItems = [...visibleItems, { text, id }];
  
      setTimeout(() => {
        visibleItems = visibleItems.filter(item => item.id !== id);
      }, 10000);
    }
  
    onMount(() => {
      console.log("🟢 FloatingStream mounted");
      console.log("🧠 Logs:", memoryData.logs);
      console.log("📋 Tasks:", memoryData.todayTasks);
      console.log("🎯 Focus:", memoryData.focusItems);

      addFloatingItem();
      const interval = setInterval(addFloatingItem, 3000);
      return () => clearInterval(interval);
    });
  </script>
  
  <style>
    .stream-container {
      position: fixed;
      top: 10vh;
      width: 100vw;
      pointer-events: none;
      overflow: hidden;
      z-index: 9999;
    }
  
    .floating-text {
      position: absolute;
      left: 100vw;
      white-space: nowrap;
      font-family: 'Fira Code', monospace;
      font-size: 1rem;
      color: rgba(0, 255, 255, 0.75);
      text-shadow: 0 0 6px rgba(0, 255, 255, 0.8);
      animation: scroll-left 12s linear forwards;
    }
  
    @keyframes scroll-left {
      from { left: 100vw; top: calc(5vh + 50px * var(--i)); }
      to { left: -100%; top: calc(5vh + 50px * var(--i)); }
    }
  </style>
  
  <div class="stream-container">
    {#each visibleItems as item, i (item.id)}
      <div class="floating-text" style="--i: {i}">{item.text}</div>
    {/each}
  </div>
  


// src/lib/widgets/JournalWidget.svelte

<script>
  let note = '';
  function save() {
    if (!note.trim()) return;
    const logs = JSON.parse(localStorage.getItem('journalLogs') || '[]');
    logs.push({ text: note, time: new Date().toISOString() });
    localStorage.setItem('journalLogs', JSON.stringify(logs));
    note = '';
  }
</script>
<div class="widget">
  <p class="widget-label">📝 Journal</p>
  <textarea rows="3" bind:value={note} placeholder="Thoughts..."></textarea>
  <button on:click={save}>Save</button>
</div>
<style>
:global(.widget textarea) {
  width: 100%; background: #0d1117; color: #00ffee; border: none;
  padding: .5rem; border-radius: .25rem; font-family: monospace;
}
:global(.widget button) {
  margin-top: .5rem; background: cyan; color: black;
  border: none; padding: .5rem 1rem; border-radius: .25rem;
  font-family: 'Orbitron', monospace; cursor: pointer;
}
</style>



// src/lib/widgets/LastSession.svelte

<script>
  let last = JSON.parse(localStorage.getItem('lastSession') || '{}');
</script>
<div class="widget">
  <p class="widget-label">⏱️ Last Session</p>
  {#if last.category}
    <p class="widget-detail">{last.category} • {last.duration}</p>
  {:else}
    <p class="widget-detail">No session yet</p>
  {/if}
</div>
<style>
/* reuse .widget and .widget-label styles from SleepWidget */
</style>



// src/lib/widgets/MindMapScreen.svelte

<script lang="ts">
  import { onMount } from 'svelte';
  import nodes from '../../../dataset/mindmap_nodes.json';
  import { appMode } from '../store';

  let svgEl: SVGSVGElement;

  function close() {
    appMode.set('home');
  }

  onMount(async () => {
    const d3 = await import('https://cdn.jsdelivr.net/npm/d3@7/dist/d3.min.js');
    const links: any[] = [];
    nodes.forEach((n: any) => {
      if (n.links_to) {
        n.links_to.forEach((t: string) => links.push({ source: n.id, target: t }));
      }
    });

    const simulation = d3.forceSimulation(nodes as any)
      .force('link', d3.forceLink(links).id((d: any) => d.id).distance(80))
      .force('charge', d3.forceManyBody().strength(-300))
      .force('center', d3.forceCenter(300, 200));

    const svg = d3.select(svgEl)
      .attr('viewBox', '0 0 600 400');

    const link = svg.append('g').selectAll('line')
      .data(links)
      .join('line')
      .attr('stroke', '#00ffeeaa');

    const node = svg.append('g').selectAll('circle')
      .data(nodes as any)
      .join('circle')
      .attr('r', 12)
      .attr('fill', '#00ffee')
      .call(d3.drag()
        .on('start', dragstarted)
        .on('drag', dragged)
        .on('end', dragended));

    const label = svg.append('g').selectAll('text')
      .data(nodes as any)
      .join('text')
      .text((d: any) => d.title)
      .attr('fill', '#ffffff')
      .style('font-size', '0.6rem');

    simulation.on('tick', () => {
      link
        .attr('x1', (d: any) => d.source.x)
        .attr('y1', (d: any) => d.source.y)
        .attr('x2', (d: any) => d.target.x)
        .attr('y2', (d: any) => d.target.y);

      node
        .attr('cx', (d: any) => d.x)
        .attr('cy', (d: any) => d.y);

      label
        .attr('x', (d: any) => d.x + 15)
        .attr('y', (d: any) => d.y);
    });

    function dragstarted(event: any) {
      if (!event.active) simulation.alphaTarget(0.3).restart();
      event.subject.fx = event.subject.x;
      event.subject.fy = event.subject.y;
    }

    function dragged(event: any) {
      event.subject.fx = event.x;
      event.subject.fy = event.y;
    }

    function dragended(event: any) {
      if (!event.active) simulation.alphaTarget(0);
      event.subject.fx = null;
      event.subject.fy = null;
    }
  });
</script>

<div class="mindmap">
  <button class="close-btn" on:click={close}>Close</button>
  <svg bind:this={svgEl}></svg>
</div>

<style>
.mindmap {
  position: absolute;
  top: 5vh;
  left: 5vw;
  right: 5vw;
  bottom: 5vh;
  background: rgba(0, 255, 238, 0.03);
  border: 1px solid #00ffee66;
  color: #00ffee;
  z-index: 1000;
}
.close-btn {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
}
svg {
  width: 100%;
  height: 100%;
}
</style>



// src/lib/widgets/PracticeQPortal.svelte

<script lang="ts">
  import { onMount } from 'svelte';
  import { practiceQuestions, appMode } from '../store';
  import type { PracticeQuestion } from '../store';
  import { get } from 'svelte/store';

  let mode: 'list' | 'add' | 'session' | 'result' = 'list';
  let questions: PracticeQuestion[] = [];
  let newQuestion = '';
  let newOptions = '';
  let newAnswer = '';
  let newExplanation = '';
  let category: 'digital' | 'analog' = 'digital';

  let sessionIndex = 0;
  let userAnswer = '';
  let score = 0;
  let showExplanation = false;
  let startTime = 0;
  let elapsed = 0;

  onMount(() => {
    const stored = localStorage.getItem('practiceQuestions');
    if (stored) {
      questions = JSON.parse(stored);
      practiceQuestions.set(questions);
    }
    practiceQuestions.subscribe(v => {
      questions = v;
    });
  });

  function saveQuestions() {
    localStorage.setItem('practiceQuestions', JSON.stringify(questions));
  }

  function addQuestion() {
    const q: PracticeQuestion = {
      id: Date.now(),
      text: newQuestion,
      options: newOptions ? newOptions.split('\n') : [],
      answer: newAnswer,
      explanation: newExplanation,
      category
    };
    questions = [...questions, q];
    practiceQuestions.set(questions);
    saveQuestions();
    newQuestion = newOptions = newAnswer = newExplanation = '';
    mode = 'list';
  }

  function startSession() {
    sessionIndex = 0;
    score = 0;
    showExplanation = false;
    userAnswer = '';
    startTime = Date.now();
    mode = 'session';
  }

  function submitAnswer() {
    const q = questions[sessionIndex];
    if (userAnswer.trim() === q.answer.trim()) score += 1;
    showExplanation = true;
  }

  function nextQuestion() {
    showExplanation = false;
    userAnswer = '';
    sessionIndex += 1;
    if (sessionIndex >= questions.length) {
      elapsed = Math.floor((Date.now() - startTime) / 1000);
      mode = 'result';
    }
  }

  function close() {
    appMode.set('home');
  }
</script>

<div class="practiceq-container">
  <button class="close-btn" on:click={close}>Close</button>

  {#if mode === 'list'}
    <h2>Practice Questions</h2>
    <button on:click={() => (mode = 'add')}>Add Question</button>
    <button on:click={startSession} disabled={questions.length === 0}>Start Session</button>
    <ul>
      {#each questions as q}
        <li>{q.text} ({q.category})</li>
      {/each}
    </ul>
  {:else if mode === 'add'}
    <h2>Add Question</h2>
    <input placeholder="Question" bind:value={newQuestion} />
    <textarea placeholder="Options (one per line, optional)" bind:value={newOptions}></textarea>
    <input placeholder="Answer" bind:value={newAnswer} />
    <textarea placeholder="Explanation" bind:value={newExplanation}></textarea>
    <select bind:value={category}>
      <option value="digital">digital</option>
      <option value="analog">analog</option>
    </select>
    <button on:click={addQuestion}>Save</button>
    <button on:click={() => (mode = 'list')}>Cancel</button>
  {:else if mode === 'session'}
    <h2>Question {sessionIndex + 1} / {questions.length}</h2>
    <p>{questions[sessionIndex].text}</p>
    {#if questions[sessionIndex].options.length}
      <ul>
        {#each questions[sessionIndex].options as opt}
          <li>{opt}</li>
        {/each}
      </ul>
    {/if}
    {#if !showExplanation}
      <input placeholder="Your answer" bind:value={userAnswer} />
      <button on:click={submitAnswer}>Submit</button>
    {:else}
      <p>Answer: {questions[sessionIndex].answer}</p>
      <p>{questions[sessionIndex].explanation}</p>
      <button on:click={nextQuestion}>{sessionIndex < questions.length - 1 ? 'Next' : 'Finish'}</button>
    {/if}
  {:else if mode === 'result'}
    <h2>Session Complete</h2>
    <p>Score: {score} / {questions.length}</p>
    <p>Time: {elapsed}s</p>
    <button on:click={() => (mode = 'list')}>Back</button>
  {/if}
</div>

<style>
.practiceq-container {
  position: absolute;
  top: 10vh;
  left: 50%;
  transform: translateX(-50%);
  width: 90vw;
  max-width: 600px;
  background: rgba(0, 255, 238, 0.06);
  border: 1px solid #00ffee99;
  color: #00ffee;
  padding: 1rem;
  font-family: 'Orbitron', monospace;
  z-index: 1000;
}
.close-btn {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
}
</style>



// src/lib/widgets/RadialDial.svelte

<script>
  export let label = "Progress";
  export let percent = 0;
  const r = 58;
  const circumference = 2 * Math.PI * r;
  $: capped = percent > 99.5 ? 99.5 : percent;
  $: dash = (capped / 100) * circumference;
  $: empty = circumference - dash;
</script>

<div class="dial-float">
  <svg viewBox="0 0 160 160" class="dial-svg">
    <!-- Background ring -->
    <circle cx="80" cy="80" r="58" class="dial-bg"/>
    <!-- Foreground glowing arc -->
     <circle
    cx="80" cy="80" r="58"
    class="dial-fg"
    stroke-dasharray="{dash} {empty}"
    stroke-linecap="round"
    style="transform: rotate(-90deg); transform-origin: 50% 50%;"
  />
    <text x="85" y="85" class="dial-num">{percent}%</text>
   
  </svg>
  
  <div class="dial-label">{label}</div>
</div>


<style>
.dial-float {
  display: flex;
  flex-direction: column;
  align-items: center;
  background: none;
  margin: 0 auto;
}
.dial-svg {
  width: 260px;
  height: 260px;
  overflow: visible;
}
.dial-bg {
  fill: none;
  stroke: #164060;
  stroke-width: 8;
  opacity: 0.7;
  filter: blur(0.5px);
}
.dial-fg {
  fill: none;
  stroke: var(--hud-neon);
  stroke-width: 8;
  stroke-linecap: round;
  transition: stroke-dasharray 0.7s cubic-bezier(.2,1,.4,1);
  filter: drop-shadow(0 0 20px #00ffee) drop-shadow(0 0 44px #00ffee55);
}
.dial-num {
  font-family: 'Orbitron', monospace;
  fill: #00ffee;
  font-size: 2.0rem;
  font-weight: 800;
  text-anchor: middle;
  filter: drop-shadow(0 0 7px #00ffeecc);
  letter-spacing: 0.10em;
  dominant-baseline: middle;
  paint-order: stroke;
  stroke: #021213;
  stroke-width: 1px;
}

.dial-label {
  font-family: 'Orbitron', monospace;
  fill: #3ddbd9;
  font-size: 1.7rem;
  font-weight: 600;
  text-anchor: middle;
  letter-spacing: 0.18em;
  filter: drop-shadow(0 0 2px #00ffee55);
  paint-order: stroke;
  stroke: #021213;
  stroke-width: 0.6px;
}



</style>




// src/lib/widgets/ResponseLeaf.svelte

<script lang="ts">
    import { onDestroy } from 'svelte';
  
    export let message: string;
    export let onClose: () => void;
  
    let copied = false;
    let displayedText = "";
    let typingInterval: number | null = null;
    let currentIndex = 0;
  
    function copyToClipboard() {
      navigator.clipboard.writeText(message).then(() => {
        copied = true;
        setTimeout(() => copied = false, 1500);
      });
    }
  
    function startTypewriter(text: string) {
      // Clear any existing interval
      if (typingInterval !== null) {
        clearInterval(typingInterval);
        typingInterval = null;
      }
  
      displayedText = "";
      currentIndex = 0;
  
      if (!text) return; // Do nothing if the message is empty
  
      typingInterval = setInterval(() => {
        if (currentIndex < text.length) {
          displayedText += text[currentIndex];
          currentIndex++;
        } else {
          if (typingInterval !== null) {
            clearInterval(typingInterval);
            typingInterval = null;
          }
        }
      }, 12); // Adjust typing speed (milliseconds) as needed
    }
  
    // Reactive statement: This block runs whenever 'message' changes
    $: {
      if (message) {
        startTypewriter(message);
      } else {
        // Handle empty message case if needed, e.g., clear displayedText
        displayedText = "";
        if (typingInterval !== null) {
          clearInterval(typingInterval);
          typingInterval = null;
        }
      }
    }
  
    // Ensure the interval is cleared when the component is destroyed
    onDestroy(() => {
      if (typingInterval !== null) {
        clearInterval(typingInterval);
      }
    });
  </script>
  
  <style>
  .response-overlay {
    position: absolute;
    top: calc(50% - 20vh);
    left: calc(30% + 6vw);
    width: 50vw;
    height: 30vh;
    padding: 2rem;
    background: rgba(0, 255, 255, 0.08);
    border: 1px solid rgba(0, 255, 255, 0.4);
    border-radius: 1.5rem;
    backdrop-filter: blur(24px) brightness(1.1);
    -webkit-backdrop-filter: blur(24px) brightness(1.1);
    box-shadow: 0 0 40px rgba(0, 255, 255, 0.3), inset 0 0 30px rgba(0, 255, 255, 0.1);
    color: #ffffff;
    font-family: 'Fira Code', monospace;
    font-size: 0.95rem;
    animation: fadeIn 0.3s ease-out;
    z-index: 999;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
  }
  
  .message-content {
    white-space: pre-wrap;
    font-family: 'Fira Code', monospace;
    font-size: 1rem;
    line-height: 1.4;
    overflow-y: auto;
    max-height: 22vh;
  }
  
  .buttons {
    display: flex;
    justify-content: flex-end;
    gap: 0.8rem;
    margin-top: 1.5rem;
  }
  
  .btn {
    background: transparent;
    border: 1px solid rgba(0, 255, 255, 0.6);
    color: #00ffee;
    border-radius: 0.5rem;
    padding: 4px 14px;
    font-size: 0.85rem;
    font-family: 'Fira Code', monospace;
    cursor: pointer;
    transition: all 0.2s ease;
    backdrop-filter: blur(8px);
  }
  
  .btn:hover {
    background: rgba(0, 255, 255, 0.2);
    transform: scale(1.05);
  }
  
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: scale(0.97);
    }
    to {
      opacity: 1;
      transform: scale(1);
    }
  }
  </style>
  
  <div class="response-overlay">
    <div class="message-content">{message}</div>
  
    <div class="buttons">
      <button class="btn" on:click={copyToClipboard}>
        {#if copied}Copied{:else}Copy{/if}
      </button>
      <button class="btn" on:click={onClose}>Close</button>
    </div>
  </div>
  


// src/lib/widgets/SleepWidget.svelte

<script>
  let sleepHours = localStorage.getItem('sleepHours') || '';
  function save() { localStorage.setItem('sleepHours', sleepHours); }
</script>
<div class="widget">
  <p class="widget-label">🌙 Sleep (hrs)</p>
  <input type="number" min="0" step="0.1" bind:value={sleepHours} on:change={save} />
  <p class="widget-detail">Logged: {sleepHours || '—'}</p>
</div>
<style>
:global(.widget) {
  width: 14rem; background: #1e293b; padding: 1rem;
  border-radius: .5rem; box-shadow: 0 0 .5rem rgba(0,255,255,0.2);
  display: flex; flex-direction: column; align-items: center;
}
:global(.widget-label) {
  font-family: 'Orbitron', monospace; color: #3ddbd9; margin-bottom: .5rem;
}
:global(.widget input) {
  width: 100%; background: #0d1117; color: #00ffee; border: none;
  padding: .5rem; border-radius: .25rem; text-align: center;
}
:global(.widget-detail) {
  color: #aaa; margin-top: .5rem; font-size: .85rem;
}
</style>



// src/lib/widgets/StreakWidget.svelte

<script lang="ts">
  import { streaks } from '../store';
</script>

  <div class="bottom-widget streak-widget">
    <div class="streak-box">🔥 Digital: {$streaks.digital} days</div>
    <div class="streak-box">⚡ Analog: {$streaks.analog} days</div>
    <div class="streak-box">🚀 Project: {$streaks.project} days</div>
  </div>
  

  <style>
    .streak-widget {
      display: flex;
      justify-content: center;
      gap: 2rem;
      margin-top: 1.5rem;
    }
  
    .streak-box {
      padding: 0.75rem 1.2rem;
      background: rgba(0, 255, 238, 0.05);
      border: 1px solid #00ffee88;
      color: #00ffee;
      font-family: 'Orbitron', monospace;
      font-size: 1.2rem;
      border-radius: 0.5rem;
      box-shadow: 0 0 6px #00ffee66;
      backdrop-filter: blur(3px);
      min-width: 140px;
      text-align: center;
    }
  </style>
  


// src/lib/widgets/StatusDock.svelte

<script lang="ts">
  import { lastJournal, lastSleep, lastActivity, streaks } from '../store';
</script>

<div class="status-dock">
  <div class="status-box">📝 {$lastJournal}</div>
  <div class="status-box">😴 {$lastSleep}</div>
  <div class="status-box">🧠 {$lastActivity}</div>
  <div class="status-box">🔥 Digital: {$streaks.digital} days</div>
  <div class="status-box">⚡ Analog: {$streaks.analog} days</div>
  <div class="status-box">🚀 Project: {$streaks.project} days</div>
</div>

<style>
  .status-dock {
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
    margin-top: 3rem;
    margin-bottom: 2.5rem;
    padding: 0 2rem;
    z-index: 2;
    position: relative;
  }

  .status-box {
    position: relative;
    background: rgba(0, 255, 238, 0.025);
    border: 1px solid #00ffee44;
    color: #00ffee;
    font-family: 'Orbitron', monospace;
    font-size: 1rem;
    padding: 0.6rem 1.5rem;
    clip-path: polygon(
      8px 0%, calc(100% - 8px) 0%, 100% 8px,
      100% calc(100% - 8px), calc(100% - 8px) 100%,
      8px 100%, 0% calc(100% - 8px), 0% 8px
    );
    box-shadow: 0 0 6px #00ffee33;
    transition: box-shadow 0.3s ease, background 0.3s ease;
    backdrop-filter: blur(3px);
    white-space: nowrap;
  }

  .status-box:hover {
    background: rgba(0, 255, 238, 0.06);
    box-shadow: 0 0 8px #00ffee77;
  }
</style>



